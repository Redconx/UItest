import { define } from '../preactement/define';
import { ChoiceList } from '../../ChoiceList/ChoiceList';
import { parseBooleanAttr } from '../wrapperUtils';
import { findElementsOfType } from '../../utilities/findElementsOfType';
import { formAttrs } from '../shared-attributes/form';
import { jsx as _jsx } from "react/jsx-runtime";
const attributes = ['choices', 'class-name', 'disabled', 'inversed', 'name', 'root-id', 'size', 'type', ...formAttrs];

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-enable */

const Wrapper = _ref => {
  let {
    children,
    choices,
    rootId,
    ...otherProps
  } = _ref;
  function parseChildren(node) {
    const elements = findElementsOfType(['ds-choice'], node);
    if (elements.length) {
      return Array.from(elements).map(element => {
        const {
          children,
          ...attrs
        } = element.props;

        /**
         * Begin logic to define optional nested children of a choice.
         */
        let checkedChild,
          uncheckedChild = undefined;
        if (element.props.children.length > 0) {
          element.props.children.map(child => {
            if (typeof child !== 'string') {
              const {
                children,
                slot
              } = child.props;
              if (slot === 'checked-children') {
                checkedChild = children;
              }
              if (slot === 'unchecked-children') {
                uncheckedChild = children;
              }
            }
          });
        }
        return {
          checkedChildren: checkedChild,
          uncheckedChildren: uncheckedChild,
          ...attrs
        };
      });
    }
    return [];
  }
  return /*#__PURE__*/_jsx(ChoiceList, {
    ...otherProps,
    choices: typeof choices === 'string' ? JSON.parse(choices) : parseChildren(children),
    disabled: parseBooleanAttr(otherProps.disabled),
    id: rootId,
    inversed: parseBooleanAttr(otherProps.inversed)
  });
};
define('ds-choice-list', () => Wrapper, {
  attributes,
  events: ['onChange', 'onBlur', 'onComponentBlur']
});