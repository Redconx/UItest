import { isValidElement } from 'react';
export function findElementsOfType(types, node) {
  if (!node || !( /*#__PURE__*/isValidElement(node) || Array.isArray(node))) {
    // There's nothing to recurse on, and this is not the droid we're looking for
    return [];
  }
  if ( /*#__PURE__*/isValidElement(node) && types.includes(node.type)) {
    // We found it! Return an array because it will be flattened
    return [node];
  }
  if (Array.isArray(node)) {
    // Recurse on each member of the array and flatten the result
    return node.reduce((acc, child) => [...acc, ...findElementsOfType(types, child)], []);
  }

  // It's a React element, so recurse on its children (a ReactNode)
  return findElementsOfType(types, node.props?.children);
}