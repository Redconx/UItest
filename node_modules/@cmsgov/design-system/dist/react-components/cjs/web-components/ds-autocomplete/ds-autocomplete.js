"use strict";

var _define = require("../preactement/define");
var _Autocomplete = require("../../Autocomplete");
var _wrapperUtils = require("../wrapperUtils");
var _TextField = require("../../TextField");
var _form = require("../shared-attributes/form");
var _jsxRuntime = require("react/jsx-runtime");
const attributes = ['aria-clear-label', 'aria-complete-label',
// Using the lowercase HTML attribute name rather than `auto-focus` so it's
// more natural. There's no reason for us to worry about name collisions.
'autofocus', 'class-name', 'clear-input-text', 'clear-search-button', 'value', 'items', 'loading-message', 'loading', 'menu-heading-id', 'menu-heading', 'name', 'no-results-message', 'root-id', ..._form.formAttrs];
const Wrapper = _ref => {
  let {
    autofocus,
    clearSearchButton,
    hint,
    value,
    items,
    label,
    loading,
    menuHeading,
    menuHeadingId,
    rootId,
    ...otherProps
  } = _ref;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Autocomplete.Autocomplete, {
    ...otherProps,
    label: menuHeading,
    labelId: menuHeadingId,
    autoFocus: (0, _wrapperUtils.parseBooleanAttr)(autofocus),
    clearSearchButton: (0, _wrapperUtils.parseBooleanAttr)(clearSearchButton),
    id: rootId,
    items: (0, _wrapperUtils.parseJsonAttr)(items),
    loading: (0, _wrapperUtils.parseBooleanAttr)(loading),
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextField.TextField, {
      label: label,
      hint: hint,
      name: "autocomplete",
      value: value
    })
  });
};

/* eslint-disable @typescript-eslint/no-namespace */

/* eslint-enable */

(0, _define.define)('ds-autocomplete', () => Wrapper, {
  attributes,
  events: [['onChange', selectedItem => ({
    detail: {
      selectedItem
    }
  })], ['onInputValueChange', value => ({
    detail: {
      value
    }
  })]]
});