"use strict";

var _define = require("../preactement/define");
var _TextField = require("../../TextField");
var _wrapperUtils = require("../wrapperUtils");
var _form = require("../shared-attributes/form");
var _useLabelMask = require("../../TextField/useLabelMask");
var _jsxRuntime = require("react/jsx-runtime");
const attributes = [
// Using the lowercase HTML attribute name rather than `auto-focus` so it's
// more natural. There's no reason for us to worry about name collisions.
'autofocus', 'aria-disabled', 'class-name', 'disabled', 'field-class-name', 'inversed', 'label-mask', 'multiline', 'name', 'numeric', 'value', 'root-id', 'rows', 'size', 'type', ..._form.formAttrs];
function getMaskFunction(value) {
  switch (value) {
    case 'phone':
      return _useLabelMask.PHONE_MASK;
    case 'zip':
      return _useLabelMask.ZIP_MASK;
    case 'ssn':
      return _useLabelMask.SSN_MASK;
    case 'currency':
      return _useLabelMask.CURRENCY_MASK;
  }
  return undefined;
}
const Wrapper = _ref => {
  let {
    autofocus,
    rootId,
    ...otherProps
  } = _ref;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextField.TextField, {
    ...otherProps,
    autoFocus: (0, _wrapperUtils.parseBooleanAttr)(autofocus),
    "aria-disabled": (0, _wrapperUtils.parseBooleanAttr)(otherProps.ariaDisabled),
    disabled: (0, _wrapperUtils.parseBooleanAttr)(otherProps.disabled),
    id: rootId,
    inversed: (0, _wrapperUtils.parseBooleanAttr)(otherProps.inversed),
    labelMask: getMaskFunction(otherProps.labelMask),
    multiline: (0, _wrapperUtils.parseBooleanAttr)(otherProps.multiline)
  });
};
(0, _define.define)('ds-text-field', () => Wrapper, {
  attributes,
  events: ['onChange', 'onBlur']
});