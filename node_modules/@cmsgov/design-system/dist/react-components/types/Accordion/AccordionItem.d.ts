import type * as React from 'react';
import { AddIcon, RemoveIcon } from '../Icons';
export interface AccordionItemProps {
    /**
     * Class to be applied to the header `<button>` of an accordion item.
     */
    buttonClassName?: string;
    children?: React.ReactNode;
    /**
     * Class to be applied to the content `<div>` tag of an accordion item.
     */
    contentClassName?: string;
    /**
     * Boolean to expand the accordion.
     */
    defaultOpen?: boolean;
    /**
     * Text for the accordion item heading.
     */
    heading: React.ReactNode | string;
    /**
     *  Heading type to override default `<h2>`.
     */
    headingLevel?: '1' | '2' | '3' | '4' | '5' | '6';
    /**
     *  If not provided, a unique id will be automatically generated and used.
     */
    id?: string;
    /**
     * Sets the accordion panel's open state. Use this in combination with `onChange`
     * for a controlled accordion; otherwise, set `defaultOpen`.
     */
    isControlledOpen?: boolean;
    /**
     * A callback function that's invoked when a controlled accordion panel is selected or deselected.
     */
    onChange?: (...args: any[]) => any;
    /**
     * Icon to overwrite default close icon
     */
    closeIconComponent?: React.ReactElement<any> | any | ((...args: any[]) => any);
    /**
     * Icon to overwrite default open icon
     */
    openIconComponent?: React.ReactElement<any> | any | ((...args: any[]) => any);
}
export interface AccordionItemState {
    isOpen?: boolean;
}
export declare const AccordionItem: {
    ({ buttonClassName, children, contentClassName, defaultOpen, heading, headingLevel, id, isControlledOpen, onChange, closeIconComponent, openIconComponent, }: AccordionItemProps): import("react/jsx-runtime").JSX.Element;
    defaultProps: {
        defaultOpen: boolean;
        headingLevel: string;
        closeIconComponent: typeof RemoveIcon;
        openIconComponent: typeof AddIcon;
    };
};
export default AccordionItem;
