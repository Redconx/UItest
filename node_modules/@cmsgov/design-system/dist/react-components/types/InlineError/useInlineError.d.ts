import type * as React from 'react';
export type ErrorPlacement = 'top' | 'bottom';
export interface UseInlineErrorProps {
    /**
     * The ID of the error message applied to this field. If none is provided, the id
     * will be derived from the `id` prop for the field.
     */
    errorId?: string;
    /**
     * Location of the error message relative to the field input
     */
    errorPlacement?: ErrorPlacement;
    /**
     * Enable the error state by providing an error message.
     */
    errorMessage?: React.ReactNode;
    /**
     * Additional classes to be added to the error message
     */
    errorMessageClassName?: string;
    /**
     * A unique `id` for the field element
     */
    id: string;
    /**
     * Set to `true` to apply the "inverse" color scheme
     */
    inversed?: boolean;
}
/**
 * Hook that takes the props for a form field component, extracts the props relevant
 * to the error message, and conditionally renders an `InlineError` in the `topError`
 * or `bottomError` property based on the `errorPlacement` and the presence of an
 * `errorMessage`.
 */
export declare function useInlineError<T extends UseInlineErrorProps>(props: T): {
    errorId: string;
    invalid: any;
    topError: any;
    bottomError: any;
};
