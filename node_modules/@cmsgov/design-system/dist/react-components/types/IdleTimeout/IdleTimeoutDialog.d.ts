import type * as React from 'react';
export interface IdleTimeoutDialogProps {
    /**
     * The text for the 'continue session' button in warning dialog.
     */
    continueSessionText: React.ReactNode;
    /**
     * The heading text for the warning dialog.
     */
    heading?: React.ReactNode;
    /**
     * The text for the button that ends the session in warning dialog.
     */
    endSessionButtonText?: React.ReactNode;
    /**
     *
     */
    endSessionUrl?: string;
    /**
     * Controls whether the dialog is in an open state
     */
    isOpen?: boolean;
    /**
     * The message text for the warning dialog.
     * Note that using the token `<timeToTimeout>` will be replaced in the message text with the number of minutes until timeout.
     */
    message: React.ReactNode;
    /**
     * Function that is called when the user select the 'close' button for the dialog
     */
    onClose: (...args: any[]) => any;
    /**
     * Function that is called when the user chooses to keep the session alive.
     * The IdleTimeout component will reset the countdown internally.
     */
    onSessionContinue: (...args: any[]) => any;
    /**
     * Optional function that is called when the session is manually ended by user.
     * If not provided, the behavior of `onTimeout` will be used.
     */
    onSessionForcedEnd?: (...args: any[]) => any;
    /**
     * Describes if the button to manually end session should be shown
     */
    showSessionEndButton?: boolean;
}
export declare const IdleTimeoutDialog: ({ continueSessionText, heading, endSessionButtonText, endSessionUrl, isOpen, message, onClose, onSessionContinue, onSessionForcedEnd, showSessionEndButton, }: IdleTimeoutDialogProps) => React.ReactElement;
export default IdleTimeoutDialog;
