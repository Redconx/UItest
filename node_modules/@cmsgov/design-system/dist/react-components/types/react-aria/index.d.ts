declare function $bdd25dc72710631f$export$cbd84cdb2e668835(props: any): $73SJx$react.DetailedReactHTMLElement<{
    'data-testid': string;
    'aria-hidden': boolean;
    "data-a11y-ignore": string;
    style: any;
    onFocus: (e: any) => void;
    onBlur: (e: any) => void;
}, HTMLElement> | $73SJx$react.ReactElement<{
    type: string;
    autoComplete: any;
    name: any;
    disabled: any;
    value: any;
}, string | $73SJx$react.JSXElementConstructor<any>>;
declare function $c1d7fb2ec91bae71$export$6d08773d2e66f8f2(props: any): any;
declare namespace $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 {
    function getCollectionNode(props: any, context: any): Generator<{
        type: string;
        props: any;
        rendered: any;
        textValue: any;
        'aria-label': any;
        hasChildNodes: any;
        childNodes(): Generator<any, void, undefined>;
    }, void, unknown>;
}
declare function $9fc4852771d079eb$export$6e2c8f0811a474ce(props: any): any;
declare namespace $9fc4852771d079eb$export$6e2c8f0811a474ce {
    function getCollectionNode(props: any): Generator<{
        type: string;
        props: any;
        hasChildNodes: boolean;
        rendered: any;
        'aria-label': any;
        childNodes(): Generator<any, void, undefined>;
    }, void, unknown>;
}
declare function $701a24aa0da5b062$export$ea18c227d4417cc3(props: any, ref: any): {
    isPressed: any;
    buttonProps: any;
};
declare function $c350ade66beef0af$export$8c18d1b4f7232bbf(props: any, state: any): {
    labelProps: {};
    buttonProps: any;
    inputProps: any;
    listBoxProps: any;
    descriptionProps: {
        id: any;
    };
    errorMessageProps: {
        id: any;
    };
};
declare function $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props: any): {
    toggle: (focusStrategy: any, trigger: any) => void;
    open: (focusStrategy: any, trigger: any) => void;
    close: () => void;
    selectionManager: $d496c0a20b6e58ec$export$6c8a5aaad13c9852;
    selectedKey: any;
    setSelectedKey: any;
    disabledKeys: Set<any>;
    isFocused: boolean;
    setFocused: (isFocused: any) => void;
    selectedItem: any;
    collection: any;
    inputValue: any;
    setInputValue: any;
    commit: () => void;
    revert: () => void;
    isOpen: any;
    setOpen: any;
    focusStrategy: any;
};
declare function $c132121280ec012d$export$50eacbbf140a3141(props: any, state: any, ref: any): {
    labelProps: {};
    listBoxProps: any;
};
declare function $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props: any): {
    itemProps: {
        role: string;
    };
    headingProps: {
        id: any;
        role: string;
    } | {
        id?: undefined;
        role?: undefined;
    };
    groupProps: {
        role: string;
        'aria-label': any;
        'aria-labelledby': any;
    };
};
declare function $293f70390ea03370$export$497855f14858aa34(props: any, state: any, ref: any): {
    optionProps: any;
    labelProps: {
        id: any;
    };
    descriptionProps: {
        id: any;
    };
    isFocused: boolean;
    isFocusVisible: boolean;
    isSelected: any;
    isDisabled: any;
    isPressed: any;
    allowsSelection: any;
    hasAction: any;
};
declare function $58aed456727eb0f3$export$e64b2f635402ca43(props: any, state: any, ref: any): {
    labelProps: {
        onClick: () => void;
    };
    triggerProps: any;
    valueProps: {
        id: any;
    };
    menuProps: {
        autoFocus: any;
        shouldSelectOnPressUp: boolean;
        shouldFocusOnHover: boolean;
        disallowEmptySelection: boolean;
        onBlur: (e: any) => void;
        'aria-labelledby': string;
        onClose: any;
        id: any;
    };
    descriptionProps: {
        id: any;
    };
    errorMessageProps: {
        id: any;
    };
};
declare function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props: any): {
    open(): void;
    toggle(focusStrategy: any): void;
    isFocused: boolean;
    setFocused: $73SJx$react.Dispatch<$73SJx$react.SetStateAction<boolean>>;
    isOpen: any;
    setOpen: any;
    close: () => void;
    focusStrategy: any;
    collection: any;
    disabledKeys: Set<any>;
    selectionManager: $d496c0a20b6e58ec$export$6c8a5aaad13c9852;
    selectedKey: any;
    setSelectedKey: any;
    selectedItem: any;
};
import $73SJx$react from 'react';
declare class $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {
    constructor(collection: any, state: any, options: any);
    /**
     * The type of selection that is allowed in the collection.
     */ get selectionMode(): any;
    /**
     * Whether the collection allows empty selection.
     */ get disallowEmptySelection(): any;
    /**
     * The selection behavior for the collection.
     */ get selectionBehavior(): any;
    /**
     * Sets the selection behavior for the collection.
     */ setSelectionBehavior(selectionBehavior: any): void;
    /**
     * Whether the collection is currently focused.
     */ get isFocused(): any;
    /**
     * Sets whether the collection is focused.
     */ setFocused(isFocused: any): void;
    /**
     * The current focused key in the collection.
     */ get focusedKey(): any;
    /** Whether the first or last child of the focused key should receive focus. */ get childFocusStrategy(): any;
    /**
     * Sets the focused key.
     */ setFocusedKey(key: any, childFocusStrategy: any): void;
    /**
     * The currently selected keys in the collection.
     */ get selectedKeys(): any;
    /**
     * The raw selection value for the collection.
     * Either 'all' for select all, or a set of keys.
     */ get rawSelection(): any;
    /**
     * Returns whether a key is selected.
     */ isSelected(key: any): any;
    /**
     * Whether the selection is empty.
     */ get isEmpty(): boolean;
    /**
     * Whether all items in the collection are selected.
     */ get isSelectAll(): boolean;
    _isSelectAll: boolean;
    get firstSelectedKey(): any;
    get lastSelectedKey(): any;
    get disabledKeys(): any;
    get disabledBehavior(): any;
    /**
     * Extends the selection to the given key.
     */ extendSelection(toKey: any): void;
    getKeyRange(from: any, to: any): any[];
    getKeyRangeInternal(from: any, to: any): any[];
    getKey(key: any): any;
    /**
     * Toggles whether the given key is selected.
     */ toggleSelection(key: any): void;
    /**
     * Replaces the selection with only the given key.
     */ replaceSelection(key: any): void;
    /**
     * Replaces the selection with the given keys.
     */ setSelectedKeys(keys: any): void;
    getSelectAllKeys(): any[];
    /**
     * Selects all items in the collection.
     */ selectAll(): void;
    /**
     * Removes all keys from the selection.
     */ clearSelection(): void;
    /**
     * Toggles between select all and an empty selection.
     */ toggleSelectAll(): void;
    select(key: any, e: any): void;
    /**
     * Returns whether the current selection is equal to the given selection.
     */ isSelectionEqual(selection: any): boolean;
    canSelectItem(key: any): boolean;
    isDisabled(key: any): boolean;
    collection: any;
    state: any;
    allowsCellSelection: any;
}
export { $bdd25dc72710631f$export$cbd84cdb2e668835 as HiddenSelect, $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 as Item, $9fc4852771d079eb$export$6e2c8f0811a474ce as Section, $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $c350ade66beef0af$export$8c18d1b4f7232bbf as useComboBox, $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e as useComboBoxState, $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $293f70390ea03370$export$497855f14858aa34 as useOption, $58aed456727eb0f3$export$e64b2f635402ca43 as useSelect, $2bc3a590c5373a4e$export$5159ec8b34d4ec12 as useSelectState };
