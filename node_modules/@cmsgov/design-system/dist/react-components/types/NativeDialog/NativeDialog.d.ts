import type * as React from 'react';
import { DialogHTMLAttributes } from 'react';
export interface NativeDialogProps extends Omit<DialogHTMLAttributes<HTMLElement>, 'children'> {
    children: React.ReactNode;
    /**
     * Pass `true` to have the dialog close when its backdrop pseudo-element is clicked
     */
    backdropClickExits?: boolean;
    boundingBoxRef?: React.MutableRefObject<any>;
    /**
     * Controls whether the dialog is in an open state
     */
    isOpen: boolean;
    /**
     * Function called to close dialog.
     */
    exit: (...args: any[]) => any;
    /**
     * A custom `id` attribute for the dialog element
     */
    id?: string;
    /**
     * Determines which native dialog method is called to open the dialog. If the dialog
     * is opened with `showModal`, focus will be trapped inside the dialog, and it will
     * need to be closed before the rest of the page can be interacted with. See the
     * [`showModal` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal)
     * for more details.
     */
    showModal?: boolean;
}
/**
 * This is an internal component and may change without warning. Use at your own risk!
 */
export declare const NativeDialog: ({ children, exit, isOpen, showModal, backdropClickExits, boundingBoxRef, ...dialogProps }: NativeDialogProps) => import("react/jsx-runtime").JSX.Element;
export default NativeDialog;
