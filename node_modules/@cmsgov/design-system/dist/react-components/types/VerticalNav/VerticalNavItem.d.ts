import type * as React from 'react';
export type VerticalNavItemComponent = React.ReactElement<any> | any | ((...args: any[]) => any);
export interface VerticalNavItemProps {
    /**
     * Internal prop passed from the parent VerticalNav
     * @hide-prop This gets passed through from the parent VerticalNav to a nested VerticalNav
     */
    _selectedId?: string;
    /**
     * Additional classes to be added to the root element
     */
    className?: string;
    /**
     * When provided, this will render the passed in component. This is useful when
     * integrating with React Router's `<Link>` or using your own custom component.
     */
    component?: VerticalNavItemComponent;
    /**
     * Whether or not the item's sub-navigation is in a collapsed state by default
     */
    defaultCollapsed?: boolean;
    /**
     * Called when the link is clicked, with the following arguments:
     * [`SyntheticEvent`](https://facebook.github.io/react/docs/events.html),
     * `id`, `url`.
     * This takes precedence over the `VerticalNav` `onLinkClick` prop
     */
    onClick?: (evt: React.MouseEvent | React.KeyboardEvent, id: string, url: string) => any;
    /**
     * Called when this item's subnav is collapsed or expanded, with the
     * following arguments: `id`, `collapsed`
     */
    onSubnavToggle?: (id: string, collapsed: boolean) => any;
    /**
     * Optional identifier. This can be handy if you're passing in an
     * `onClick` handler. A unique ID will be generated if one isn't provided.
     */
    id?: string;
    /**
     * An array of nested `VerticalNavItem` data objects to be rendered in a
     * sub-navigation list.
     */
    items?: any[];
    /**
     * Text to render for this nav item
     */
    label: React.ReactNode;
    /**
     * A URL to navigate to if this item is a link
     */
    url?: string;
    /**
     * If this item is currently selected
     */
    selected?: boolean;
}
export declare const VerticalNavItem: {
    (props: VerticalNavItemProps): React.ReactElement;
    defaultProps: {
        defaultCollapsed: boolean;
    };
};
export default VerticalNavItem;
