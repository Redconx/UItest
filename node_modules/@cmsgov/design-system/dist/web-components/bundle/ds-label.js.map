{"version":3,"file":"ds-label.js","mappings":"0LAUO,MAAMA,EAAOC,IAClB,IAAI,SACFC,EAAQ,UACRC,EAAS,GACTC,EAAE,SACFC,EAAQ,iBACRC,KACGC,GACDN,EACJ,MAAMO,EAAc,IAAW,YAAaH,GAAY,qBAAsBF,GAC9E,IAAIM,EAYJ,OAXIH,GAAoBJ,IACU,iBAArBI,IAETA,EAAmBA,EAAiBI,OAAOC,QAAQ,MAAO,IAE1DL,GAAsC,KAIxCG,EAAc,MAEI,QAAM,IAAK,IAC1BF,EACHH,GAAIA,EACJD,UAAWK,EACXN,SAAU,CAACI,EAAkBG,EAAaP,IAC1C,C,mEClCJ,MAAMU,EAAe,CACnBT,UAAW,GACXU,QAAS,gBAEJ,SAASC,EAAgBC,GAC9B,MAAMC,EAAiB,2BAA2BD,EAAMZ,WAAa,KACrE,OAAoB,QAAK,IAAS,CAChCc,OAAO,IAAAC,GAAE,wBACNN,KACAG,EACHZ,UAAWa,EACXd,UAAuB,QAAK,OAAQ,CAClCiB,EAAG,y/BAGT,C,6ECZO,MAAMC,EAAUnB,IACrB,IAAI,WACFoB,EAAU,UACVlB,EAAS,SACTD,EAAQ,YACRoB,EAAW,GACXlB,EAAE,SACFC,EAAQ,MACRY,EAAK,QACLJ,KACGN,GACDN,EACJ,MAAMsB,EAAa,IAAW,YAAa,CACzC,qBAAsBlB,GACrBF,GACGqB,GAAS,OAAM,SAAUpB,GACzBqB,EAAU,GAAGD,WACbE,EAAgB,GAAGF,UACnBG,EAAiBL,EAAc,GAAGG,KAAWC,IAAkBD,EAC/DG,GAAeP,EACfQ,EAAoB,CAAC,EAK3B,OAJID,IACFC,EAAkB,mBAAqBF,EACvCE,EAAwB,KAAI,QAEV,QAAM,MAAO,CAC/B,cAAeR,EACflB,UAAWoB,EACXnB,GAAIA,GAAMwB,EAAcJ,OAASM,EACjCjB,QAASA,EACTkB,MAAO,gCACJF,KACAtB,EACHL,SAAU,CAAC0B,IAA4B,QAAK,QAAS,CACnDxB,GAAIqB,EACJvB,SAAUe,IACRW,GAAeN,IAA4B,QAAK,OAAQ,CAC1DlB,GAAIsB,EACJxB,SAAUoB,IACRpB,IACJ,EAEJkB,EAAQR,aAAe,CACrBS,YAAY,EACZhB,UAAU,E,wGCnCL,SAAS2B,EAAY/B,GAC1B,IAAI,SACFC,EAAQ,UACRC,EAAS,GACTC,EAAE,SACFC,KACGE,GACDN,EACJ,MAAMgC,EAAU,IAAW,oBAAqB,CAC9C,6BAA8B5B,GAC7BF,GAEH,OAAoB,QAAK,IAAK,IACzBI,EACHJ,UAAW8B,EACX7B,IAAI,OAAM,iBAAkBA,GAC5B,YAAa,YACb,cAAe,OACfF,SAAUA,IAAyB,QAAM,KAAW,CAClDA,SAAU,EAAc,QAAK,IAAiB,CAC5CW,QATU,oBAUK,QAAK,OAAQ,CAC5BV,UAAW,iCACXD,SAAU,IAAG,IAAAgB,GAAE,4BACbhB,MAGV,CACA,S,uFC7BO,MAAMgC,EAAQnB,IACnB,MAAM,QACJoB,EAAO,GACP/B,EAAE,SACFF,EAAQ,UACRkC,EAAS,KACTC,EAAI,OACJC,EAAM,UACNnC,EAAS,SACTE,EAAQ,aACRkC,EAAY,QACZC,EAAO,iBACPlC,KACGmC,GACD1B,EAOJ,IAAI2B,GACAL,GAAQ/B,KACVoC,GAA2B,QAAK,IAAM,CACpCpC,iBAAkBA,EAClBD,SAAUA,EACVD,GAAIkC,EACJpC,SAAUmC,KAGd,IAAIM,EAAeJ,EACS,iBAAjBA,IACTI,GAA4B,QAAK,IAAa,CAC5CvC,GAAIoC,EACJtC,SAAUqC,KAGd,IAAIK,EAAUT,EACI,WAAdC,GAA0BD,IAC5BU,QAAQC,KAAK,yFACbF,OAAUd,GAEZ,MAAMiB,EAAgBX,EAChBH,EAAU,IAAW,aAAc9B,EAAWE,GAAY,uBAChE,OAAoB,QAAM,KAAW,CACnCH,SAAU,EAAc,QAAK6C,EAAe,CAC1C5C,UAAW8B,EACXW,QAASA,EACTxC,GAAIA,KACDqC,EACHvC,SAAUA,IACRwC,EAAaC,IACjB,EAEJT,EAAMtB,aAAe,CACnBwB,UAAW,Q,mECjEb,MACMY,EAAU/C,IACd,IAAI,SACFI,EAAQ,OACRmB,EACAyB,IAAKd,KACF5B,GACDN,EACJ,OAAoB,QAAKiC,EAAA,EAAO,IAC3B3B,EACHF,UAAU,QAAiBA,GAC3B8B,QAASA,EACT/B,GAAIoB,GACJ,GAEJ,OAAO,YAAY,IAAMwB,GAAS,CAChCE,WAhBiB,CAAC,aAAc,WAAY,MAAO,Y,iBCJ9C,SAASC,EAAiBC,GAE/B,YAAgBtB,IAATsB,GAA+B,UAATA,CAC/B,CACO,SAASC,EAAcD,GAC5B,OAAOA,EAAO,IAAIE,KAAKF,QAAQtB,CACjC,CACO,SAASyB,EAAiBH,GAC/B,QAAatB,IAATsB,EAAoB,OAAOI,SAASJ,EAC1C,CACO,SAASK,EAAcL,GAS5B,MARqBM,KACnB,IACEC,KAAKC,MAAMF,EACb,CAAE,MAAOG,GACP,OAAO,CACT,CACA,OAAO,CAAI,EAENC,CAAaV,GAAQO,KAAKC,MAAMR,GAAQA,CACjD,C","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Hint/Hint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/AlertCircleIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/SvgIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/InlineError/InlineError.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Label/Label.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-label/ds-label.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import classNames from 'classnames';\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Hints are used in conjunction with a Label to describe individual form fields\n * or fieldsets. They are built in to all form fields in the design system, but\n * they can also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/hint/).\n */\nexport const Hint = _ref => {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    requirementLabel,\n    ...otherProps\n  } = _ref;\n  const hintClasses = classNames('ds-c-hint', inversed && 'ds-c-hint--inverse', className);\n  let hintPadding;\n  if (requirementLabel && children) {\n    if (typeof requirementLabel === 'string') {\n      // Remove any existing spacing and punctuation\n      requirementLabel = requirementLabel.trim().replace(/\\.$/, '');\n      // Add punctuation after the requirementLabel so it doesn't run into the hint\n      requirementLabel = requirementLabel + '.';\n    }\n\n    // Add space between hint and preceding requirementLabel\n    hintPadding = ' ';\n  }\n  return /*#__PURE__*/_jsxs(\"p\", {\n    ...otherProps,\n    id: id,\n    className: hintClasses,\n    children: [requirementLabel, hintPadding, children]\n  });\n};","import { t } from \"../i18n\";\nimport { SvgIcon } from \"./SvgIcon\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst defaultProps = {\n  className: '',\n  viewBox: '37 2 135 135'\n};\nexport function AlertCircleIcon(props) {\n  const iconCssClasses = `ds-c-icon--alert-circle ${props.className || ''}`;\n  return /*#__PURE__*/_jsx(SvgIcon, {\n    title: t('icons.alertCircle'),\n    ...defaultProps,\n    ...props,\n    className: iconCssClasses,\n    children: /*#__PURE__*/_jsx(\"path\", {\n      d: \"M162.18 41.592c-5.595-9.586-13.185-17.176-22.771-22.771-9.588-5.595-20.055-8.392-31.408-8.392-11.352 0-21.821 2.797-31.408 8.392-9.587 5.594-17.177 13.184-22.772 22.771-5.596 9.587-8.393 20.057-8.393 31.408 0 11.351 2.798 21.82 8.392 31.408 5.595 9.584 13.185 17.176 22.772 22.771 9.587 5.595 20.056 8.392 31.408 8.392s21.822-2.797 31.408-8.392c9.586-5.594 17.176-13.185 22.771-22.771C167.773 94.82 170.57 84.35 170.57 73c0-11.351-2.797-21.822-8.39-31.408zm-43.75 70.433c0 .761-.246 1.398-.734 1.914s-1.086.773-1.793.773H100.26c-.706 0-1.331-.271-1.874-.814-.543-.543-.814-1.168-.814-1.873V96.546c0-.706.271-1.331.814-1.874.543-.543 1.168-.814 1.874-.814h15.643c.707 0 1.306.258 1.793.773.488.518.734 1.154.734 1.915v15.479zm-.164-28.026c-.055.543-.339 1.019-.854 1.426-.517.407-1.154.61-1.914.61h-15.073c-.761 0-1.413-.203-1.956-.61-.543-.407-.815-.883-.815-1.426l-1.385-50.595c0-.653.271-1.141.814-1.467.544-.434 1.196-.652 1.956-.652h17.926c.761 0 1.412.217 1.955.652.543.326.813.815.813 1.467l-1.467 50.595z\"\n    })\n  });\n}","import classNames from 'classnames';\nimport useId from \"../utilities/useId\";\n\n// a type for react icon components that makes the 'title' prop optional & removes 'children' from type\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const SvgIcon = _ref => {\n  let {\n    ariaHidden,\n    className,\n    children,\n    description,\n    id,\n    inversed,\n    title,\n    viewBox,\n    ...otherProps\n  } = _ref;\n  const svgClasses = classNames('ds-c-icon', {\n    'ds-c-icon--inverse': inversed\n  }, className);\n  const rootId = useId('icon--', id);\n  const titleId = `${rootId}__title`;\n  const descriptionId = `${rootId}__desc`;\n  const ariaLabelledBy = description ? `${titleId} ${descriptionId}` : titleId;\n  const isSrVisible = !ariaHidden;\n  const screenReaderProps = {};\n  if (isSrVisible) {\n    screenReaderProps['aria-labelledby'] = ariaLabelledBy;\n    screenReaderProps['role'] = 'img';\n  }\n  return /*#__PURE__*/_jsxs(\"svg\", {\n    \"aria-hidden\": ariaHidden,\n    className: svgClasses,\n    id: id ?? isSrVisible ? rootId : undefined,\n    viewBox: viewBox,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ...screenReaderProps,\n    ...otherProps,\n    children: [isSrVisible && /*#__PURE__*/_jsx(\"title\", {\n      id: titleId,\n      children: title\n    }), isSrVisible && description && /*#__PURE__*/_jsx(\"desc\", {\n      id: descriptionId,\n      children: description\n    }), children]\n  });\n};\nSvgIcon.defaultProps = {\n  ariaHidden: true,\n  inversed: false\n};","import classNames from 'classnames';\nimport { AlertCircleIcon } from \"../Icons/AlertCircleIcon\";\nimport { t } from \"../i18n\";\nimport useId from \"../utilities/useId\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Inline errors are error messages that are paired directly with form fields.\n * They are built in to all form fields in the design system, but they can also\n * be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/inline-error/).\n */\nexport function InlineError(_ref) {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    ...otherProps\n  } = _ref;\n  const classes = classNames('ds-c-inline-error', {\n    'ds-c-inline-error--inverse': inversed\n  }, className);\n  const viewbox = '36 -12 186 186';\n  return /*#__PURE__*/_jsx(\"p\", {\n    ...otherProps,\n    className: classes,\n    id: useId('inline-error--', id),\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    children: children && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(AlertCircleIcon, {\n        viewBox: viewbox\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"ds-u-visibility--screen-reader\",\n        children: `${t('inlineError.prefix')}: `\n      }), children]\n    })\n  });\n}\nexport default InlineError;","import classNames from 'classnames';\nimport { Hint } from \"../Hint\";\nimport { InlineError } from \"../InlineError\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * The Label component describes individual form fields (as a `<label>`) or fieldsets (as\n * a `<legend>`). They are built in to all form fields in the design system, but they can\n * also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/label/).\n */\nexport const Label = props => {\n  const {\n    fieldId,\n    id,\n    children,\n    component,\n    hint,\n    hintId,\n    className,\n    inversed,\n    errorMessage,\n    errorId,\n    requirementLabel,\n    ...labelProps\n  } = props;\n  if (process.env.NODE_ENV !== 'production' && (hint || hintId)) {\n    console.warn(\"[Deprecated]: Hints are now their own component called 'Hint'. Please render your 'Hint' directly instead of passing them to 'Label'.\");\n  }\n  if (process.env.NODE_ENV !== 'production' && errorMessage) {\n    console.warn(\"[Deprecated]: Passing 'errorMessage' to the 'Label' component is now deprecated. Please render your error message directly with the 'InlineError' component instead.\");\n  }\n  let hintElement;\n  if (hint || requirementLabel) {\n    hintElement = /*#__PURE__*/_jsx(Hint, {\n      requirementLabel: requirementLabel,\n      inversed: inversed,\n      id: hintId,\n      children: hint\n    });\n  }\n  let errorElement = errorMessage;\n  if (typeof errorMessage === 'string') {\n    errorElement = /*#__PURE__*/_jsx(InlineError, {\n      id: errorId,\n      children: errorMessage\n    });\n  }\n  let htmlFor = fieldId;\n  if (component === 'legend' && fieldId) {\n    console.warn('The `for` attribute is invalid for legends. Omitting `fieldId` from rendered element.');\n    htmlFor = undefined;\n  }\n  const ComponentType = component;\n  const classes = classNames('ds-c-label', className, inversed && 'ds-c-label--inverse');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ComponentType, {\n      className: classes,\n      htmlFor: htmlFor,\n      id: id,\n      ...labelProps,\n      children: children\n    }), hintElement, errorElement]\n  });\n};\nLabel.defaultProps = {\n  component: 'label'\n};\nexport default Label;","import { define } from \"../preactement/define\";\nimport { Label } from \"../../Label\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['class-name', 'inversed', 'for', 'root-id'];\nconst Wrapper = _ref => {\n  let {\n    inversed,\n    rootId,\n    for: fieldId,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(Label, {\n    ...otherProps,\n    inversed: parseBooleanAttr(inversed),\n    fieldId: fieldId,\n    id: rootId\n  });\n};\ndefine('ds-label', () => Wrapper, {\n  attributes\n});","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["Hint","_ref","children","className","id","inversed","requirementLabel","otherProps","hintClasses","hintPadding","trim","replace","defaultProps","viewBox","AlertCircleIcon","props","iconCssClasses","title","t","d","SvgIcon","ariaHidden","description","svgClasses","rootId","titleId","descriptionId","ariaLabelledBy","isSrVisible","screenReaderProps","undefined","xmlns","InlineError","classes","Label","fieldId","component","hint","hintId","errorMessage","errorId","labelProps","hintElement","errorElement","htmlFor","console","warn","ComponentType","Wrapper","for","attributes","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseInt","parseJsonAttr","str","JSON","parse","e","isJsonString"],"sourceRoot":""}