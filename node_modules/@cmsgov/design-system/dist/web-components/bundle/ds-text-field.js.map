{"version":3,"file":"ds-text-field.js","mappings":"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","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Hint/Hint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Hint/useHint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/AlertCircleIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/SvgIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/InlineError/InlineError.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/InlineError/useInlineError.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Label/Label.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Label/useLabelProps.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/TextField/LabelMask.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/TextField/maskHelpers.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/TextField/Mask.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/TextField/TextField.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/TextField/TextInput.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/TextField/useLabelMask.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/cleanFieldProps.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/describeField.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/mergeIds.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-text-field/ds-text-field.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/shared-attributes/form.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import classNames from 'classnames';\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Hints are used in conjunction with a Label to describe individual form fields\n * or fieldsets. They are built in to all form fields in the design system, but\n * they can also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/hint/).\n */\nexport const Hint = _ref => {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    requirementLabel,\n    ...otherProps\n  } = _ref;\n  const hintClasses = classNames('ds-c-hint', inversed && 'ds-c-hint--inverse', className);\n  let hintPadding;\n  if (requirementLabel && children) {\n    if (typeof requirementLabel === 'string') {\n      // Remove any existing spacing and punctuation\n      requirementLabel = requirementLabel.trim().replace(/\\.$/, '');\n      // Add punctuation after the requirementLabel so it doesn't run into the hint\n      requirementLabel = requirementLabel + '.';\n    }\n\n    // Add space between hint and preceding requirementLabel\n    hintPadding = ' ';\n  }\n  return /*#__PURE__*/_jsxs(\"p\", {\n    ...otherProps,\n    id: id,\n    className: hintClasses,\n    children: [requirementLabel, hintPadding, children]\n  });\n};","import { Hint } from \"./Hint\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * Hook that takes the props for a form field component, extracts the props relevant\n * to the Hint, and conditionally renders the hint if it is needed.\n */\nexport function useHint(props) {\n  const {\n    hint,\n    inversed,\n    requirementLabel,\n    hintClassName\n  } = props;\n  let hintElement;\n  let hintId;\n  if (hint || requirementLabel) {\n    hintId = props.hintId ?? `${props.id}__hint`;\n    hintElement = /*#__PURE__*/_jsx(Hint, {\n      requirementLabel: requirementLabel,\n      inversed: inversed,\n      id: hintId,\n      className: hintClassName,\n      children: hint\n    });\n  }\n  return {\n    hintId,\n    hintElement\n  };\n}","import { t } from \"../i18n\";\nimport { SvgIcon } from \"./SvgIcon\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst defaultProps = {\n  className: '',\n  viewBox: '37 2 135 135'\n};\nexport function AlertCircleIcon(props) {\n  const iconCssClasses = `ds-c-icon--alert-circle ${props.className || ''}`;\n  return /*#__PURE__*/_jsx(SvgIcon, {\n    title: t('icons.alertCircle'),\n    ...defaultProps,\n    ...props,\n    className: iconCssClasses,\n    children: /*#__PURE__*/_jsx(\"path\", {\n      d: \"M162.18 41.592c-5.595-9.586-13.185-17.176-22.771-22.771-9.588-5.595-20.055-8.392-31.408-8.392-11.352 0-21.821 2.797-31.408 8.392-9.587 5.594-17.177 13.184-22.772 22.771-5.596 9.587-8.393 20.057-8.393 31.408 0 11.351 2.798 21.82 8.392 31.408 5.595 9.584 13.185 17.176 22.772 22.771 9.587 5.595 20.056 8.392 31.408 8.392s21.822-2.797 31.408-8.392c9.586-5.594 17.176-13.185 22.771-22.771C167.773 94.82 170.57 84.35 170.57 73c0-11.351-2.797-21.822-8.39-31.408zm-43.75 70.433c0 .761-.246 1.398-.734 1.914s-1.086.773-1.793.773H100.26c-.706 0-1.331-.271-1.874-.814-.543-.543-.814-1.168-.814-1.873V96.546c0-.706.271-1.331.814-1.874.543-.543 1.168-.814 1.874-.814h15.643c.707 0 1.306.258 1.793.773.488.518.734 1.154.734 1.915v15.479zm-.164-28.026c-.055.543-.339 1.019-.854 1.426-.517.407-1.154.61-1.914.61h-15.073c-.761 0-1.413-.203-1.956-.61-.543-.407-.815-.883-.815-1.426l-1.385-50.595c0-.653.271-1.141.814-1.467.544-.434 1.196-.652 1.956-.652h17.926c.761 0 1.412.217 1.955.652.543.326.813.815.813 1.467l-1.467 50.595z\"\n    })\n  });\n}","import classNames from 'classnames';\nimport useId from \"../utilities/useId\";\n\n// a type for react icon components that makes the 'title' prop optional & removes 'children' from type\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const SvgIcon = _ref => {\n  let {\n    ariaHidden,\n    className,\n    children,\n    description,\n    id,\n    inversed,\n    title,\n    viewBox,\n    ...otherProps\n  } = _ref;\n  const svgClasses = classNames('ds-c-icon', {\n    'ds-c-icon--inverse': inversed\n  }, className);\n  const rootId = useId('icon--', id);\n  const titleId = `${rootId}__title`;\n  const descriptionId = `${rootId}__desc`;\n  const ariaLabelledBy = description ? `${titleId} ${descriptionId}` : titleId;\n  const isSrVisible = !ariaHidden;\n  const screenReaderProps = {};\n  if (isSrVisible) {\n    screenReaderProps['aria-labelledby'] = ariaLabelledBy;\n    screenReaderProps['role'] = 'img';\n  }\n  return /*#__PURE__*/_jsxs(\"svg\", {\n    \"aria-hidden\": ariaHidden,\n    className: svgClasses,\n    id: id ?? isSrVisible ? rootId : undefined,\n    viewBox: viewBox,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ...screenReaderProps,\n    ...otherProps,\n    children: [isSrVisible && /*#__PURE__*/_jsx(\"title\", {\n      id: titleId,\n      children: title\n    }), isSrVisible && description && /*#__PURE__*/_jsx(\"desc\", {\n      id: descriptionId,\n      children: description\n    }), children]\n  });\n};\nSvgIcon.defaultProps = {\n  ariaHidden: true,\n  inversed: false\n};","import classNames from 'classnames';\nimport { AlertCircleIcon } from \"../Icons/AlertCircleIcon\";\nimport { t } from \"../i18n\";\nimport useId from \"../utilities/useId\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Inline errors are error messages that are paired directly with form fields.\n * They are built in to all form fields in the design system, but they can also\n * be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/inline-error/).\n */\nexport function InlineError(_ref) {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    ...otherProps\n  } = _ref;\n  const classes = classNames('ds-c-inline-error', {\n    'ds-c-inline-error--inverse': inversed\n  }, className);\n  const viewbox = '36 -12 186 186';\n  return /*#__PURE__*/_jsx(\"p\", {\n    ...otherProps,\n    className: classes,\n    id: useId('inline-error--', id),\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    children: children && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(AlertCircleIcon, {\n        viewBox: viewbox\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"ds-u-visibility--screen-reader\",\n        children: `${t('inlineError.prefix')}: `\n      }), children]\n    })\n  });\n}\nexport default InlineError;","import InlineError from \"./InlineError\";\nimport classNames from 'classnames';\nimport { config } from \"../config\";\n\n// TODO: We should conditionally return an errorId, because we want to be able\n// to include it in the aria-describedby without conditional logic in the component\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * Hook that takes the props for a form field component, extracts the props relevant\n * to the error message, and conditionally renders an `InlineError` in the `topError`\n * or `bottomError` property based on the `errorPlacement` and the presence of an\n * `errorMessage`.\n */\nexport function useInlineError(props) {\n  const errorId = props.errorId ?? `${props.id}__error`;\n  const {\n    errorMessage,\n    errorMessageClassName,\n    errorPlacement = config().errorPlacementDefault,\n    inversed\n  } = props;\n  const errorElement = /*#__PURE__*/_jsx(InlineError, {\n    id: errorId,\n    inversed: inversed,\n    className: classNames(errorMessageClassName, errorPlacement === 'bottom' && errorMessage && 'ds-c-inline-error--bottom'),\n    children: errorMessage\n  });\n  let topError;\n  let bottomError;\n  if (errorPlacement === 'top') {\n    topError = errorElement;\n  } else {\n    bottomError = errorElement;\n  }\n\n  // If the user has provided an `aria-invalid` attribute, use that as the source\n  // of truth; otherwise, it's invalid if there's an error message.\n  const invalid = props['aria-invalid'] ?? !!errorMessage;\n  return {\n    errorId: errorMessage ? errorId : undefined,\n    invalid,\n    topError,\n    bottomError\n  };\n}","import classNames from 'classnames';\nimport { Hint } from \"../Hint\";\nimport { InlineError } from \"../InlineError\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * The Label component describes individual form fields (as a `<label>`) or fieldsets (as\n * a `<legend>`). They are built in to all form fields in the design system, but they can\n * also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/label/).\n */\nexport const Label = props => {\n  const {\n    fieldId,\n    id,\n    children,\n    component,\n    hint,\n    hintId,\n    className,\n    inversed,\n    errorMessage,\n    errorId,\n    requirementLabel,\n    ...labelProps\n  } = props;\n  if (process.env.NODE_ENV !== 'production' && (hint || hintId)) {\n    console.warn(\"[Deprecated]: Hints are now their own component called 'Hint'. Please render your 'Hint' directly instead of passing them to 'Label'.\");\n  }\n  if (process.env.NODE_ENV !== 'production' && errorMessage) {\n    console.warn(\"[Deprecated]: Passing 'errorMessage' to the 'Label' component is now deprecated. Please render your error message directly with the 'InlineError' component instead.\");\n  }\n  let hintElement;\n  if (hint || requirementLabel) {\n    hintElement = /*#__PURE__*/_jsx(Hint, {\n      requirementLabel: requirementLabel,\n      inversed: inversed,\n      id: hintId,\n      children: hint\n    });\n  }\n  let errorElement = errorMessage;\n  if (typeof errorMessage === 'string') {\n    errorElement = /*#__PURE__*/_jsx(InlineError, {\n      id: errorId,\n      children: errorMessage\n    });\n  }\n  let htmlFor = fieldId;\n  if (component === 'legend' && fieldId) {\n    console.warn('The `for` attribute is invalid for legends. Omitting `fieldId` from rendered element.');\n    htmlFor = undefined;\n  }\n  const ComponentType = component;\n  const classes = classNames('ds-c-label', className, inversed && 'ds-c-label--inverse');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ComponentType, {\n      className: classes,\n      htmlFor: htmlFor,\n      id: id,\n      ...labelProps,\n      children: children\n    }), hintElement, errorElement]\n  });\n};\nLabel.defaultProps = {\n  component: 'label'\n};\nexport default Label;","/**\n *\n * Note that this does not return the `fieldId` in the props. That is up to the component\n * to apply to the `Label` itself. Some components purposely do not set a `for` attribute\n * on their labels. These are typically components with multiple inputs wrapped in a\n * `fieldset` like `ChoiceList`, `MultiInputDateField`, and `MonthPicker`.\n */\nexport function useLabelProps(props) {\n  const labelId = props.labelId ?? `${props.id}__label`;\n  const {\n    label,\n    labelClassName,\n    inversed\n  } = props;\n  return {\n    children: label,\n    className: labelClassName,\n    id: labelId,\n    inversed\n  };\n}\nexport default useLabelProps;","import { Children, cloneElement } from \"preact/compat\";\nimport { useLabelMask } from \"./useLabelMask\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nconst LabelMask = props => {\n  const field = Children.only(props.children);\n  const {\n    labelMask,\n    inputProps\n  } = useLabelMask(props.labelMask, field.props);\n  const input = cloneElement(field, inputProps);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [labelMask, input]\n  });\n};\nexport default LabelMask;","// Deliminate chunks of integers\nconst maskDeliminatedRegex = {\n  phone: /(\\d{3})(\\d{1,3})?(\\d+)?/,\n  ssn: /([*\\d]{3})([*\\d]{1,2})?([*\\d]+)?/,\n  zip: /(\\d{5})(\\d*)/\n};\n\n/**\n * Remove everything that isn't a digit or asterisk\n * @param {String} value\n * @returns {String}\n */\nfunction toDigitsAndAsterisks(value) {\n  return value.replace(/[^\\d*]/g, '');\n}\n\n/**\n * Split value into groups and insert a hyphen deliminator between each\n * @param {String} value\n * @param {RegExp} rx - Regular expression with capturing groups\n * @returns {String}\n */\nfunction deliminateRegexGroups(value, rx) {\n  const matches = toDigitsAndAsterisks(value).match(rx);\n  if (matches && matches.length > 1) {\n    value = matches.slice(1).filter(a => !!a) // remove undefined groups\n    .join('-');\n  }\n  return value;\n}\n\n/**\n * Determines if a value is a valid string with numeric digits\n * @param {String} value\n * @param {String} mask\n * @returns {Boolean}\n */\nfunction isValueMaskable(value, mask) {\n  if (value && typeof value === 'string') {\n    const hasDigits = value.match(/\\d/);\n    const hasDigitsAsterisks = value.match(/[\\d*]/g);\n    if (hasDigits || hasDigitsAsterisks && mask === 'ssn') {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Performs various transforms to format provided string as currency.\n * @param {String} value - a string containing at least one digit\n * @returns {String}\n */\nexport function toCurrency(value) {\n  // Determine if the value is positive or negative.\n  const sign = value.indexOf('-') === 0 ? '-' : '';\n  // Remove all characters except digits and decimal points.\n  value = value.replace(/[^\\d.]/g, '');\n  // Remove all but the first decimal point.\n  const firstDecimalPointIndex = value.indexOf('.');\n  value = value.replace(/[.]/g, (match, index) => {\n    return index > firstDecimalPointIndex ? '' : match;\n  });\n  // Remove leading zeroes (we'll add one back later if needed).\n  value = value.replace(/^0+/g, '');\n  // Split into whole number and fractional parts based on decimal point.\n  let [whole, fractional = ''] = value.split('.');\n  // Add commas for readability (if applicable), or simply return zero.\n  // This \"replaces\" the zero-length space between groups of 3 digits with a comma.\n  // Demo of this regex: https://regex101.com/r/JPocnt/2\n  whole = whole === '' ? '0' : whole.replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, ',');\n  if (fractional !== '') {\n    if (fractional.length === 1) {\n      // Pad with a zero for two decimal places.\n      fractional = fractional.concat('0');\n    } else if (fractional.length > 2) {\n      // Cut all characters after the second decimal place.\n      fractional = fractional.slice(0, 2);\n    }\n    // Clear the fractional if there's no cents. Add the decimal back here.\n    fractional = fractional === '00' ? '' : `.${fractional}`;\n  }\n  return `${sign}${whole}${fractional}`;\n}\n\n/**\n * Returns the value with additional masking characters, or the same value back if invalid numeric string\n * @param {String} value\n * @returns {String}\n */\nexport function maskValue() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let mask = arguments.length > 1 ? arguments[1] : undefined;\n  if (isValueMaskable(value, mask)) {\n    if (mask === 'currency') {\n      value = toCurrency(value);\n    } else if (maskDeliminatedRegex[mask]) {\n      // Use deliminator regex to mask value and remove unwanted characters\n      // If the regex does not match, return the numeric digits.\n      value = deliminateRegexGroups(value, maskDeliminatedRegex[mask]);\n    }\n  }\n  return value;\n}\n\n/**\n * Remove mask characters from value, or the same value back if invalid numeric string\n * @param {String} value\n * @param {String} mask\n * @returns {String}\n */\nexport function unmaskValue(value, mask) {\n  if (isValueMaskable(value, mask)) {\n    if (mask === 'currency') {\n      // Preserve only digits, decimal point, or negative symbol\n      const matches = value.match(/^-|[\\d.]/g);\n      if (matches) {\n        value = matches.join('');\n      }\n    } else if (maskDeliminatedRegex[mask]) {\n      // Remove the deliminators and revert to single ungrouped string\n      value = toDigitsAndAsterisks(value);\n    }\n  }\n  return value;\n}","import { Children, PureComponent, cloneElement, isValidElement } from \"preact/compat\";\nimport classNames from 'classnames';\nimport { maskValue, unmaskValue } from \"./maskHelpers\";\n\n// TODO: Remove `maskValue` and `unmaskValue` exports with next major release (v3.x.x)\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport { maskValue, unmaskValue };\nconst maskPattern = {\n  phone: '[0-9-]*',\n  ssn: '[0-9-*]*',\n  zip: '[0-9-]*',\n  currency: '[0-9.,-]*'\n};\nconst maskOverlayContent = {\n  currency: '$'\n};\nexport class Mask extends PureComponent {\n  constructor(props) {\n    super(props);\n    const field = this.field();\n    const initialValue = field.props.value || field.props.defaultValue;\n    this.state = {\n      value: maskValue(initialValue, props.mask)\n    };\n  }\n  componentDidUpdate(prevProps) {\n    if (this.debouncedOnBlurEvent) {\n      this.field().props.onBlur(this.debouncedOnBlurEvent);\n      this.debouncedOnBlurEvent = null;\n    }\n    const fieldProps = this.field().props;\n    const prevField = Children.only(prevProps.children);\n    const prevFieldProps = isValidElement(prevField) ? prevField.props : {};\n    const isControlled = fieldProps.value !== undefined;\n    if (isControlled && prevFieldProps.value !== fieldProps.value) {\n      const {\n        mask\n      } = this.props;\n      // For controlled components, the value prop should ideally be changed by\n      // the controlling component once we've called onChange with our updates.\n      // If the change was triggered this way through user input, then the prop\n      // given should match our internal state when unmasked. If what we're\n      // given and what we have locally don't match, that means the controlling\n      // component has made its own unrelated change, so we should update our\n      // state and mask this new value.\n      if (unmaskValue(fieldProps.value, mask) !== unmaskValue(this.state.value, mask)) {\n        const value = maskValue(fieldProps.value || '', mask);\n        this.setState({\n          value\n        });\n      }\n    }\n  }\n  /**\n   * Get the child text field. Called as a method so that\n   * updates to the field cause the mask to re-render\n   * @returns {React.ReactElement} Child TextField\n   */\n  field() {\n    return Children.only(this.props.children);\n  }\n\n  /**\n   * To avoid a jarring experience for screen readers, we only\n   * add/remove characters after the field has been blurred,\n   * rather than when the user is typing in the field\n   * @param {Object} evt\n   * @param {React.Element} field - Child TextField\n   */\n  handleBlur(evt, field) {\n    const value = maskValue(evt.target.value, this.props.mask);\n\n    // We only debounce the onBlur when we know for sure that\n    // this component will re-render (AKA when the value changes)\n    // and when an onBlur callback is present\n    const debounce = value !== this.state.value && typeof field.props.onBlur === 'function';\n    if (debounce) {\n      // We need to retain a reference to the event after the callback\n      // has been called. We pass this onto the consuming app's onBlur\n      // only after the value has been manipulated – this way, the\n      // value returned by event.target.value is the value after masking\n      evt.persist();\n      this.debouncedOnBlurEvent = evt;\n    }\n    this.setState({\n      value\n    });\n    if (!debounce && typeof field.props.onBlur === 'function') {\n      // If we didn't debounce the onBlur event, then we need to\n      // call the onBlur callback from here\n      field.props.onBlur(evt);\n    }\n  }\n\n  /**\n   * @param {Object} evt\n   * @param {React.Element} field - Child TextField\n   */\n  handleChange(evt, field) {\n    this.setState({\n      value: evt.target.value\n    });\n    if (typeof field.props.onChange === 'function') {\n      field.props.onChange(evt);\n    }\n  }\n  render() {\n    const {\n      mask\n    } = this.props;\n    const field = this.field();\n    const modifiedTextField = cloneElement(field, {\n      defaultValue: undefined,\n      fieldClassName: classNames(field.props.fieldClassName, `ds-c-field--${mask}`),\n      onBlur: evt => this.handleBlur(evt, field),\n      onChange: evt => this.handleChange(evt, field),\n      value: this.state.value,\n      type: 'text',\n      inputMode: 'numeric',\n      pattern: maskPattern[this.props.mask]\n    });\n\n    // UI overlayed on top of a field to support certain masks\n    const maskOverlay = maskOverlayContent[mask] ? /*#__PURE__*/_jsx(\"div\", {\n      className: `ds-c-field__before ds-c-field__before--${mask}`,\n      children: maskOverlayContent[mask]\n    }) : null;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: `ds-c-field-mask ds-c-field-mask--${mask}`,\n      children: [maskOverlay, modifiedTextField]\n    });\n  }\n}\nexport default Mask;","import LabelMask from \"./LabelMask\";\nimport Mask from \"./Mask\";\nimport TextInput from \"./TextInput\";\nimport classNames from 'classnames';\nimport cleanFieldProps from \"../utilities/cleanFieldProps\";\nimport describeField from \"../utilities/describeField\";\nimport useId from \"../utilities/useId\";\nimport { Label } from \"../Label\";\nimport { useLabelProps } from \"../Label/useLabelProps\";\nimport { useHint } from \"../Hint/useHint\";\nimport { useInlineError } from \"../InlineError/useInlineError\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/text-field/).\n */\nexport const TextField = props => {\n  const {\n    id: originalId,\n    mask,\n    labelMask,\n    className,\n    ...remainingProps\n  } = props;\n  const id = useId('text-field--', originalId);\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.type === 'number') {\n      console.warn(`Please use the 'numeric' prop instead of 'type=\"number\"' unless your user research suggests otherwise.`);\n    }\n    if (mask && labelMask) {\n      console.warn(\"The 'mask' and 'labelMask' fields are mutually exclusive. Please use either one or the other.\");\n    }\n  }\n  const {\n    errorId,\n    topError,\n    bottomError,\n    invalid\n  } = useInlineError({\n    ...props,\n    id\n  });\n  const {\n    hintId,\n    hintElement\n  } = useHint({\n    ...props,\n    id\n  });\n  const labelProps = useLabelProps({\n    ...props,\n    id\n  });\n  let input = /*#__PURE__*/_jsx(TextInput\n  // TypeScript doesn't know we set this in .defaultProps\n  , {\n    type: TextField.defaultProps.type,\n    ...cleanFieldProps(remainingProps),\n    id: id,\n    \"aria-invalid\": invalid,\n    \"aria-describedby\": describeField({\n      ...props,\n      errorId,\n      hintId\n    })\n  });\n\n  // See if we need to wrap the input based on some props\n  if (mask) {\n    input = /*#__PURE__*/_jsx(Mask, {\n      mask: mask,\n      children: input\n    });\n  } else if (labelMask) {\n    input = /*#__PURE__*/_jsx(LabelMask, {\n      labelMask: labelMask,\n      children: input\n    });\n  }\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames('ds-u-clearfix',\n    // fixes issue where the label's margin is collapsed\n    className),\n    children: [/*#__PURE__*/_jsx(Label, {\n      ...labelProps,\n      fieldId: id\n    }), hintElement, topError, input, bottomError]\n  });\n};\nTextField.defaultProps = {\n  type: 'text'\n};\nexport default TextField;","import classNames from 'classnames';\n\n// TODO: We don't want to remove these until a breaking change in case anyone\n// was referencing these types directly from this file.\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * `<TextInput>` is an internal component used by `<TextField>`, which wraps it and handles shared form UI like labels, error messages, etc\n * `<TextInput>` is also exported for advanced design system use cases, where the internal component can be leveraged to build custom form components\n * As an internal component, it's subject to more breaking changes. Exercise caution using `<TextInput>` outside of those special cases\n */\nconst TextInput = props => {\n  const {\n    ariaLabel,\n    fieldClassName,\n    inversed,\n    multiline,\n    numeric,\n    onCopyCapture,\n    pattern,\n    rows,\n    inputRef,\n    size,\n    type,\n    ...inputProps\n  } = props;\n  const classes = classNames('ds-c-field', {\n    'ds-c-field--error': props['aria-invalid'],\n    'ds-c-field--inverse': inversed\n  }, size && `ds-c-field--${size}`, fieldClassName);\n  let inputType = type;\n  if (numeric) {\n    inputType = 'text';\n  } else if (multiline) {\n    inputType = undefined;\n  }\n  const ComponentType = multiline ? 'textarea' : 'input';\n  const numberRows = typeof rows === 'string' ? parseInt(rows) : rows;\n  return /*#__PURE__*/_jsx(ComponentType, {\n    className: classes,\n    ref: inputRef,\n    rows: multiline && numberRows ? numberRows : undefined,\n    inputMode: numeric ? 'numeric' : undefined,\n    pattern: numeric && !pattern ? '[0-9]*' : pattern,\n    type: inputType\n    // @ts-ignore: The ClipboardEventHandler for textareas and inputs are incompatible, and TS\n    // is failing to infer which one is being used here based on ComponentType.\n    ,\n    onCopyCapture: onCopyCapture,\n    ...inputProps,\n    \"aria-label\": ariaLabel || props['aria-label']\n  });\n};\nexport default TextInput;","import { useEffect, useState } from \"preact/compat\";\nimport classNames from 'classnames';\nimport mergeIds from \"../utilities/mergeIds\";\nimport useId from \"../utilities/useId\";\n\n/**\n * Function for taking raw input and formatting it for a label mask. Passing `true` to\n * `valueOnly` will return just the formatted value entered.\n */\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Regular expressions for matching commonly used masks, ensure capture groups are\n * set for each set of items that are separated by a delimiter, delimiters are\n * optional and so should be shown as well with the `?` optional flag.\n */\nexport const RE_DATE = /^(\\d{1,2})[\\D]?(\\d{1,2})?[\\D]?(\\d{1,4})?/;\nexport const RE_PHONE = /^\\(?(\\d{1,3})?\\)?[\\s.-]?(\\d{1,3})?[\\s.-]?(\\d{1,4})?/;\nexport const RE_SSN = /([*\\d]{1,3})[\\s.-]?([*\\d]{1,2})?[\\s.-]?([\\d{1,4}]+)?/;\nexport const RE_ZIP = /(\\d{1,5})/;\nexport const RE_CURRENCY = /\\$?[\\d,.-]*/;\n\n/**\n * This function returns a mask function which returns either the formatted match only, or\n * the formatted match + the hint substring which the regular expressions above match against\n * when determining what content has been filled in.\n */\nconst makeMask = (regex, hint, formatter) => {\n  return function () {\n    let rawInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let valueOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const match = regex.exec(rawInput);\n    const formattedMatch = match ? formatter(match) : '';\n    if (valueOnly) {\n      return formattedMatch;\n    }\n    const hintSub = hint.substring(formattedMatch.length);\n    return formattedMatch + hintSub;\n  };\n};\n\n/**\n * The date mask automatically pads months and days that are one digit\n */\nexport const DATE_MASK = makeMask(RE_DATE, 'MM/DD/YYYY', match => {\n  const [month, day, year] = match.slice(1);\n  const formattedDate = [\n  // We treat all non-numeric characters as a delimiter. If they're using a\n  // delimiter after a month or day, we interpret that as the user supplying\n  // a single digit for month or day, which we will automatically pad for them.\n  month && month.padStart(2, '0'), day && day.padStart(2, '0'), year].filter(s => s).join('/');\n  return formattedDate;\n});\n\n/**\n * Formatting for US phone numbers\n */\nexport const PHONE_MASK = makeMask(RE_PHONE, '###-###-####', match => {\n  return match.slice(1).filter(s => s).join('-');\n});\n\n/**\n * Formatting for US Postal codes, this could be expanded to allow for 9 digit numbers\n */\nexport const ZIP_MASK = makeMask(RE_ZIP, '#####', match => {\n  return match[1];\n});\n\n/**\n * Formatting for social security numbers.\n */\nexport const SSN_MASK = makeMask(RE_SSN, '###-##-####', match => {\n  /**\n   * for future notice, there are rules regarding social security numbers, these could be validated\n   * if we were to add error handling to useLabelMask as an additional set of functionality\n   * The first part should have 3 digits and should not be 000, 666, or between 900 and 999.\n   * The second part should have 2 digits and it should be from 01 to 99.\n   * The third part should have 4 digits and it should be from 0001 to 9999.\n   */\n  return match.slice(1).filter(s => s).join('-');\n});\n\n/**\n * Does the same thing as SSN_MASK except that it obfuscates the first five digits\n */\nexport const SSN_MASK_OBFUSCATED = (rawInput, valueOnly) => {\n  // Use the normal SSN_MASK function just to clean the raw input and format it\n  const formatted = SSN_MASK(rawInput, true);\n  // We only hide the first five digits of the SSNs\n  const obfuscation = '***-**';\n  let obfuscated;\n  if (formatted.length < obfuscation.length) {\n    obfuscated = obfuscation.substring(0, formatted.length);\n  } else {\n    obfuscated = obfuscation + formatted.substring(obfuscation.length);\n  }\n  return SSN_MASK(obfuscated, valueOnly);\n};\n\n/**\n * Currency mask is a little different, we need to modify the incoming content to strip\n * out any commas or dollar signs before evaluating it via the Intl.NumberFormat function.\n */\nexport const CURRENCY_MASK = makeMask(RE_CURRENCY, '$', match => {\n  const signed = match[0].includes('-');\n  const stripped = match[0].replace(/[^0-9.]/g, '');\n  const clipped = stripped.includes('.') ? stripped.slice(0, stripped.indexOf('.') + 3) : stripped;\n  const USDollar = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n  const formatted = USDollar.format(Number(clipped)).replace(/\\.00/, '');\n  if (Number(clipped) > 0) {\n    return signed ? '-' + formatted : formatted;\n  } else {\n    return '';\n  }\n});\nexport function useLabelMask(maskFn, originalInputProps) {\n  // TODO: Once we're on React 18, we can use the `useId` hook\n  const generatedId = useId('label-mask--');\n  const labelMaskId = originalInputProps.id ? `${originalInputProps.id}__label-mask` : generatedId;\n  const [focused, setFocused] = useState(false);\n  const {\n    onFocus,\n    onBlur,\n    onChange\n  } = originalInputProps;\n  const value = originalInputProps.value?.toString() ?? originalInputProps.defaultValue?.toString() ?? '';\n  const [currentValue, setCurrentValue] = useState(value);\n  useEffect(() => {\n    setCurrentValue(value);\n  }, [value, setCurrentValue]);\n  const inputProps = {\n    ...originalInputProps,\n    defaultValue: undefined,\n    value: currentValue,\n    onChange: e => {\n      setCurrentValue(e.currentTarget.value);\n      if (onChange) {\n        onChange(e);\n      }\n    },\n    onFocus: e => {\n      if (onFocus) {\n        onFocus(e);\n      }\n      setFocused(true);\n    },\n    onBlur: e => {\n      const maskedValue = maskFn(currentValue, true);\n      e.currentTarget.value = maskedValue;\n      e.target.value = maskedValue;\n      setCurrentValue(maskedValue);\n      if (onChange) {\n        onChange(e);\n      }\n      if (onBlur) {\n        onBlur(e);\n      }\n      setFocused(false);\n    },\n    type: 'text',\n    inputMode: 'numeric',\n    'aria-describedby': mergeIds(originalInputProps['aria-describedby'], labelMaskId)\n  };\n  let currentMask = maskFn(currentValue);\n\n  // Date mask needs to return the default empty mask when not focused\n  if (maskFn === DATE_MASK && !focused) {\n    currentMask = maskFn('');\n  }\n\n  // SSN mask needs to obfuscate the SSN when not focused\n  if (maskFn === SSN_MASK && !focused && currentValue !== '') {\n    currentMask = SSN_MASK_OBFUSCATED(currentValue);\n    inputProps.value = SSN_MASK_OBFUSCATED(currentValue, true);\n  }\n  return {\n    labelMask: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"ds-c-label-mask\",\n      id: labelMaskId,\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: classNames(focused && 'ds-u-visibility--screen-reader'),\n        children: currentMask\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classNames(!focused && 'ds-u-display--none'),\n        \"aria-hidden\": \"true\",\n        children: currentMask\n      })]\n    }),\n    inputProps\n  };\n}\nexport default useLabelMask;","/**\n * Cleans all the props associated with labels, hints, error messages, and component\n * wrappers, so they aren't passed to a field element (like an input), where they will\n * likely not be valid props or HTML attributes.\n */\nexport function cleanFieldProps(props) {\n  const newProps = {\n    ...props\n  };\n  delete newProps.className;\n  delete newProps.errorId;\n  delete newProps.errorMessage;\n  delete newProps.errorMessageClassName;\n  delete newProps.errorPlacement;\n  delete newProps.hint;\n  delete newProps.hintId;\n  delete newProps.requirementLabel;\n  delete newProps.labelId;\n  delete newProps.label;\n  delete newProps.labelClassName;\n  return newProps;\n}\nexport default cleanFieldProps;","import mergeIds from \"./mergeIds\";\n/**\n * Creates an `aria-describedby` string in a consistent order from optional\n * `aria-describedby`, `errorId`, and `hintId` props.\n */\nexport function describeField(props) {\n  return mergeIds(props['aria-describedby'], props.errorId, props.hintId) || undefined;\n}\nexport default describeField;","import classNames from 'classnames';\n/**\n * Strings together ids that may or may not exist with spaces in between. The\n * functionality is the same as `classNames`, but using a function named\n * `classNames` for merging ids makes the code a little confusing to read.\n *\n * Example use case: the `aria-describedby` attribute\n */\nconst mergeIds = classNames;\nexport default mergeIds;","import { define } from \"../preactement/define\";\nimport { TextField } from \"../../TextField\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { formAttrs } from \"../shared-attributes/form\";\nimport { PHONE_MASK, SSN_MASK, ZIP_MASK, CURRENCY_MASK } from \"../../TextField/useLabelMask\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = [\n// Using the lowercase HTML attribute name rather than `auto-focus` so it's\n// more natural. There's no reason for us to worry about name collisions.\n'autofocus', 'aria-disabled', 'class-name', 'disabled', 'field-class-name', 'inversed', 'label-mask', 'multiline', 'name', 'numeric', 'value', 'root-id', 'rows', 'size', 'type', ...formAttrs];\nfunction getMaskFunction(value) {\n  switch (value) {\n    case 'phone':\n      return PHONE_MASK;\n    case 'zip':\n      return ZIP_MASK;\n    case 'ssn':\n      return SSN_MASK;\n    case 'currency':\n      return CURRENCY_MASK;\n  }\n  return undefined;\n}\nconst Wrapper = _ref => {\n  let {\n    autofocus,\n    rootId,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(TextField, {\n    ...otherProps,\n    autoFocus: parseBooleanAttr(autofocus),\n    \"aria-disabled\": parseBooleanAttr(otherProps.ariaDisabled),\n    disabled: parseBooleanAttr(otherProps.disabled),\n    id: rootId,\n    inversed: parseBooleanAttr(otherProps.inversed),\n    labelMask: getMaskFunction(otherProps.labelMask),\n    multiline: parseBooleanAttr(otherProps.multiline)\n  });\n};\ndefine('ds-text-field', () => Wrapper, {\n  attributes,\n  events: ['onChange', 'onBlur']\n});","const labelAttrs = ['label', 'label-class-name', 'label-id'];\nconst hintAttrs = ['hint', 'hint-id', 'requirement-label', 'hint-class-name'];\nconst inlineErrorAttrs = ['error-id', 'error-placement', 'error-message', 'error-message-class-name'];\nexport const formAttrs = [...labelAttrs, ...hintAttrs, ...inlineErrorAttrs];","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["Hint","_ref","children","className","id","inversed","requirementLabel","otherProps","hintClasses","hintPadding","trim","replace","useHint","props","hint","hintClassName","hintElement","hintId","defaultProps","viewBox","AlertCircleIcon","iconCssClasses","title","t","d","SvgIcon","ariaHidden","description","svgClasses","rootId","titleId","descriptionId","ariaLabelledBy","isSrVisible","screenReaderProps","undefined","xmlns","InlineError","classes","useInlineError","errorId","errorMessage","errorMessageClassName","errorPlacement","errorPlacementDefault","errorElement","topError","bottomError","invalid","Label","fieldId","component","labelProps","htmlFor","console","warn","ComponentType","useLabelProps","labelId","label","labelClassName","field","Children","labelMask","inputProps","useLabelMask","input","cloneElement","maskDeliminatedRegex","phone","ssn","zip","toDigitsAndAsterisks","value","isValueMaskable","mask","hasDigits","match","hasDigitsAsterisks","maskValue","arguments","length","sign","indexOf","firstDecimalPointIndex","index","whole","fractional","split","concat","slice","toCurrency","rx","matches","filter","a","join","deliminateRegexGroups","unmaskValue","maskPattern","currency","maskOverlayContent","Mask","PureComponent","constructor","super","this","initialValue","defaultValue","state","componentDidUpdate","prevProps","debouncedOnBlurEvent","onBlur","fieldProps","prevField","prevFieldProps","isValidElement","setState","handleBlur","evt","target","debounce","persist","handleChange","onChange","render","modifiedTextField","fieldClassName","type","inputMode","pattern","maskOverlay","TextField","originalId","remainingProps","useId","TextInput","cleanFieldProps","describeField","ariaLabel","multiline","numeric","onCopyCapture","rows","inputRef","size","inputType","numberRows","parseInt","ref","makeMask","regex","formatter","rawInput","valueOnly","exec","formattedMatch","substring","DATE_MASK","month","day","year","padStart","s","PHONE_MASK","ZIP_MASK","SSN_MASK","SSN_MASK_OBFUSCATED","formatted","obfuscation","obfuscated","CURRENCY_MASK","signed","includes","stripped","clipped","Intl","NumberFormat","style","format","Number","maskFn","originalInputProps","generatedId","labelMaskId","focused","setFocused","useState","onFocus","toString","currentValue","setCurrentValue","useEffect","e","currentTarget","maskedValue","currentMask","newProps","attributes","getMaskFunction","Wrapper","autofocus","autoFocus","ariaDisabled","disabled","events","formAttrs","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseJsonAttr","str","JSON","parse","isJsonString"],"sourceRoot":""}