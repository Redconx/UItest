{"version":3,"file":"ds-drawer.js","mappings":"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","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Button/Button.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Button/useButtonAnalytics.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/NativeDialog/NativeDialog.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/NativeDialog/shim.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/analytics/getAnalyticsContentFromRefs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/mergeRefs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Drawer/Drawer.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-drawer/ds-drawer.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import classNames from 'classnames';\nimport mergeRefs from \"../utilities/mergeRefs\";\nimport useButtonAnalytics from \"./useButtonAnalytics\";\n\n// Collect all the additional properties that one could supply to a button component\n// that will be passed down to whatever element or component is being used. This is\n// generally permissive in order to keep the typing simple at the expense of being\n// more accurate. In a previous version of this, `OtherProps` was generic so that we\n// could extract any props from a custom component that is being passed in; however,\n// we are deprecating that prop because it's not actually needed and creates\n// unnecessary complexity that we have to maintain.\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/button/).\n */\nexport const Button = props => {\n  const {\n    analytics,\n    analyticsLabelOverride,\n    analyticsParentHeading,\n    analyticsParentType,\n    onAnalyticsEvent,\n    children,\n    className,\n    inputRef,\n    isAlternate,\n    onClick,\n    onDark,\n    size,\n    variation,\n    ...otherProps\n  } = props;\n  const {\n    contentRef,\n    sendButtonEvent\n  } = useButtonAnalytics(props);\n  const ComponentType = props.href ? 'a' : 'button';\n  const colorSchemeClass = isAlternate && `ds-c-button--alternate`;\n  const modeClass = onDark && `ds-c-button--on-dark`;\n  const sizeClass = size && `ds-c-button--${size}`;\n  const variationClass = variation && `ds-c-button--${variation}`;\n  const allClassNames = classNames('ds-c-button', colorSchemeClass, modeClass, sizeClass, variationClass, className);\n  const attrs = {\n    ...otherProps,\n    className: allClassNames\n  };\n  if (ComponentType !== 'button') {\n    delete attrs.disabled;\n    delete attrs.type;\n    if (props.disabled) {\n      attrs.role = 'link';\n      attrs['aria-disabled'] = true;\n      delete attrs.href;\n    }\n  }\n  function handleClick(e) {\n    if (!props.disabled) {\n      sendButtonEvent();\n      if (onClick) {\n        onClick(e);\n      }\n    }\n  }\n  function handleKeyPress(e) {\n    // Trigger onClick on space key event for `<a>` elements\n    if (e.key === ' ') {\n      handleClick(e);\n    }\n  }\n  return /*#__PURE__*/_jsx(ComponentType, {\n    ref: mergeRefs([inputRef, contentRef]),\n    onClick: handleClick,\n    onKeyPress: ComponentType === 'a' ? handleKeyPress : undefined,\n    ...attrs,\n    children: children\n  });\n};\nButton.defaultProps = {\n  isAlternate: false,\n  onDark: false,\n  type: 'button'\n};\nexport default Button;","import { config } from \"../config\";\nimport { getAnalyticsContentFromRefs, eventExtensionText } from \"../analytics\";\nimport { useRef } from \"preact/compat\";\nexport default function useButtonAnalytics(_ref) {\n  let {\n    analytics,\n    analyticsLabelOverride,\n    analyticsParentHeading,\n    analyticsParentType,\n    href,\n    onAnalyticsEvent = config().defaultAnalyticsFunction,\n    type,\n    variation\n  } = _ref;\n  const contentRef = useRef();\n  function sendButtonEvent() {\n    if (analytics !== true && (!config().buttonSendsAnalytics || analytics === false)) {\n      return;\n    }\n    const buttonText = analyticsLabelOverride ?? getAnalyticsContentFromRefs([contentRef]);\n    const buttonStyle = variation ?? 'default';\n    const buttonType = type ?? 'button';\n    const buttonParentHeading = analyticsParentHeading ?? ' ';\n    const buttonParentType = analyticsParentType ?? ' ';\n    return onAnalyticsEvent({\n      event_name: 'button_engagement',\n      event_extension: eventExtensionText,\n      text: buttonText,\n      button_style: buttonStyle,\n      button_type: href ? 'link' : buttonType,\n      parent_component_heading: buttonParentHeading,\n      parent_component_type: buttonParentType,\n      ...(href ? {\n        link_url: href\n      } : {})\n    });\n  }\n  return {\n    contentRef,\n    sendButtonEvent\n  };\n}","import { useRef, useEffect, useLayoutEffect } from \"preact/compat\";\nimport { shimDialogElement } from \"./shim\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * This is an internal component and may change without warning. Use at your own risk!\n */\nexport const NativeDialog = _ref => {\n  let {\n    children,\n    exit,\n    isOpen,\n    showModal,\n    backdropClickExits,\n    boundingBoxRef,\n    ...dialogProps\n  } = _ref;\n  const dialogRef = useRef(null);\n  if (isOpen === undefined) {\n    const missingPropMessage = \"The 'isOpen' prop is now used to control the state of Dialogs and Drawers. Please do not conditionally render these components to control their state. All Dialogs and Drawers will become invisible without this prop in the next major release. Using this prop will fix a focus-management issue that affects accessibility.\";\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(missingPropMessage);\n    } else {\n      console.error(missingPropMessage);\n      isOpen = true;\n    }\n  }\n\n  // Register dialog with the polyfill if necessary\n  useLayoutEffect(() => {\n    shimDialogElement(dialogRef.current);\n  });\n\n  // Call imperative show and close functions on mount/unmount\n  useEffect(() => {\n    const dialogNode = dialogRef.current;\n\n    // Show or hide the dialog based on `isOpen` value. The `dialogNode.open` property is\n    // a read-only value that will tell us if our dialog DOM element is actually in the\n    // open state.\n    let closingBecauseOfProp = false;\n    if (isOpen) {\n      if (!dialogNode.open) {\n        showModal ? dialogNode.showModal() : dialogNode.show();\n        // For a11y reasons, focus needs to be specified:\n        // 1. `<dialog>` receives focus first\n        // 2. `<dialog>` close button receives focus next\n        // 3. If `<dialog>` has some sorta sticky positioning requiring keyboard navigation, that wrapping element should receive focus next.\n        dialogNode.focus();\n      }\n    } else {\n      if (dialogNode.open) {\n        dialogNode.close();\n        closingBecauseOfProp = true;\n      }\n    }\n\n    // Bind close event listener for ESC press\n    const handleClose = event => {\n      event.preventDefault();\n      // Only call the exit handler if the parent didn't close it by setting isOpen to false\n      if (!closingBecauseOfProp) {\n        exit(event);\n      }\n    };\n    dialogNode.addEventListener('close', handleClose);\n    return () => {\n      dialogNode.removeEventListener('close', handleClose);\n    };\n  }, [isOpen, showModal, exit]);\n\n  // Bind and unbind backdrop click event listeners on mount and unmount\n  useEffect(() => {\n    if (!backdropClickExits) {\n      return;\n    }\n    const dialogNode = dialogRef.current;\n    const handleClick = event => {\n      const boundingNode = boundingBoxRef?.current ?? dialogRef.current;\n      const rect = boundingNode.getBoundingClientRect();\n      const isInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;\n      if (!isInDialog) {\n        exit(event);\n      }\n    };\n    dialogNode.addEventListener('click', handleClick);\n    return () => {\n      dialogNode.removeEventListener('click', handleClick);\n    };\n  }, [exit, backdropClickExits]);\n  return /*#__PURE__*/_jsx(\"dialog\", {\n    ref: dialogRef,\n    ...dialogProps,\n    tabIndex: -1,\n    children: children\n  });\n};\nexport default NativeDialog;","/**\n * This polyfill originally came from https://github.com/GoogleChrome/dialog-polyfill/,\n * but we've stripped it down to only what we need to not crash node environments that\n * do not yet support the dialog element.\n */\n\n/**\n * Add shims for dialog functions and properties to the provided element object.\n */\nfunction addDialogProperties(dialog) {\n  function handleKey(event) {\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      dialog.close();\n    }\n  }\n  function setOpen(open) {\n    if (open) {\n      dialog.hasAttribute('open') || dialog.setAttribute('open', '');\n      document.addEventListener('keydown', handleKey);\n    } else {\n      dialog.removeAttribute('open');\n      document.removeEventListener('keydown', handleKey);\n    }\n  }\n  dialog.show = () => setOpen(true);\n  dialog.showModal = () => setOpen(true);\n  dialog.close = () => {\n    setOpen(false);\n    const cancelEvent = new CustomEvent('close', {\n      bubbles: false,\n      cancelable: true\n    });\n    dialog.dispatchEvent(cancelEvent);\n  };\n\n  // Set a11y role. Browsers that support dialog implicitly know this already.\n  if (!dialog.hasAttribute('role')) {\n    dialog.setAttribute('role', 'dialog');\n  }\n  if (!('returnValue' in dialog)) {\n    dialog.returnValue = '';\n  }\n  Object.defineProperty(dialog, 'open', {\n    set: setOpen,\n    get: dialog.hasAttribute.bind(dialog, 'open')\n  });\n}\nexport function shimDialogElement(element) {\n  if (!element.showModal) {\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to polyfill dialog: The element is not a dialog.');\n    }\n    addDialogProperties(element);\n  }\n}","export function getAnalyticsContentFromRefs(refs) {\n  return refs.map(ref => ref.current?.textContent).find(textContent => textContent);\n}\nexport default getAnalyticsContentFromRefs;","/**\n * Combines multiple refs into one, even old-style ref functions\n *\n * Borrowed from https://github.com/gregberge/react-merge-refs/blob/main/src/index.tsx\n */\nexport default function mergeRefs(refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}","import { useRef } from \"preact/compat\";\nimport Button from \"../Button/Button\";\nimport NativeDialog from \"../NativeDialog/NativeDialog\";\nimport classNames from 'classnames';\nimport { t } from \"../i18n\";\nimport useId from \"../utilities/useId\";\n\n// TODO: closeButtonText, heading should be a string, but it is being used as a node in MCT,\n// until we provide a better solution for customization, we type it as a node.\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/drawer/).\n */\nexport const Drawer = props => {\n  const {\n    ariaLabel,\n    backdropClickExits,\n    children,\n    className,\n    closeButtonText,\n    closeButtonVariation,\n    footerBody,\n    footerTitle,\n    hasFocusTrap,\n    heading,\n    headingId: userHeadingId,\n    headingLevel,\n    headingRef: userHeadingRef,\n    isFooterSticky,\n    isHeaderSticky,\n    isOpen,\n    onCloseClick,\n    ...otherProps\n  } = props;\n  const headingRef = useRef(null);\n  const headingId = useId('drawer--', userHeadingId);\n  const Heading = `h${headingLevel}`;\n  return /*#__PURE__*/_jsx(NativeDialog, {\n    className: classNames(className, 'ds-c-drawer'),\n    exit: onCloseClick,\n    showModal: hasFocusTrap,\n    backdropClickExits: backdropClickExits,\n    isOpen: isOpen,\n    \"aria-labelledby\": headingId,\n    ...otherProps,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"ds-c-drawer__window\",\n      tabIndex: isFooterSticky && -1,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"ds-c-drawer__header\",\n        children: [/*#__PURE__*/_jsx(Heading, {\n          id: headingId,\n          className: \"ds-c-drawer__header-heading\",\n          ref: el => {\n            headingRef.current = el;\n            if (userHeadingRef) {\n              userHeadingRef.current = el;\n            }\n          },\n          children: heading\n        }), /*#__PURE__*/_jsx(Button, {\n          \"aria-label\": ariaLabel ?? t('drawer.ariaLabel'),\n          className: \"ds-c-drawer__close-button\",\n          size: \"small\",\n          onClick: onCloseClick,\n          variation: closeButtonVariation,\n          children: closeButtonText ?? t('drawer.closeButtonText')\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classNames('ds-c-drawer__body', {\n          'ds-c-drawer--is-sticky': isHeaderSticky || isFooterSticky\n        }),\n        tabIndex: 0,\n        children: children\n      }), (footerTitle || footerBody) && /*#__PURE__*/_jsxs(\"div\", {\n        className: \"ds-c-drawer__footer\",\n        children: [/*#__PURE__*/_jsx(\"h4\", {\n          className: \"ds-c-drawer__footer-title\",\n          children: footerTitle\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"ds-c-drawer__footer-body\",\n          children: footerBody\n        })]\n      })]\n    })\n  });\n};\nDrawer.defaultProps = {\n  hasFocusTrap: false,\n  headingLevel: '3'\n};\nexport default Drawer;","import { define } from \"../preactement/define\";\nimport { Drawer } from \"../../Drawer\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['children', 'close-button-aria-label', 'close-button-text', 'close-button-variation', 'class-name', 'footer-title', 'footer-body', 'has-focus-trap', 'heading', 'heading-id', 'heading-level', 'is-header-sticky', 'is-footer-sticky', 'is-open'];\nconst Wrapper = _ref => {\n  let {\n    children,\n    closeButtonAriaLabel,\n    hasFocusTrap,\n    isHeaderSticky,\n    isFooterSticky,\n    isOpen,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(Drawer, {\n    hasFocusTrap: parseBooleanAttr(hasFocusTrap),\n    isHeaderSticky: parseBooleanAttr(isHeaderSticky),\n    isFooterSticky: parseBooleanAttr(isFooterSticky),\n    isOpen: parseBooleanAttr(isOpen),\n    ariaLabel: closeButtonAriaLabel,\n    ...otherProps,\n    children: children\n  });\n};\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-enable */\n\ndefine('ds-drawer', () => Wrapper, {\n  attributes,\n  events: [['onCloseClick', event => ({\n    detail: {\n      event\n    }\n  })]]\n});","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["Button","props","analytics","analyticsLabelOverride","analyticsParentHeading","analyticsParentType","onAnalyticsEvent","children","className","inputRef","isAlternate","onClick","onDark","size","variation","otherProps","contentRef","sendButtonEvent","_ref","href","config","defaultAnalyticsFunction","type","useRef","buttonSendsAnalytics","buttonText","getAnalyticsContentFromRefs","buttonStyle","buttonType","buttonParentHeading","buttonParentType","event_name","event_extension","text","button_style","button_type","parent_component_heading","parent_component_type","link_url","useButtonAnalytics","ComponentType","colorSchemeClass","modeClass","sizeClass","variationClass","attrs","handleClick","e","disabled","role","ref","mergeRefs","onKeyPress","key","undefined","defaultProps","exit","isOpen","showModal","backdropClickExits","boundingBoxRef","dialogProps","dialogRef","missingPropMessage","console","error","useLayoutEffect","element","localName","Error","dialog","handleKey","event","keyCode","preventDefault","stopPropagation","close","setOpen","open","hasAttribute","setAttribute","document","addEventListener","removeAttribute","removeEventListener","show","cancelEvent","CustomEvent","bubbles","cancelable","dispatchEvent","returnValue","Object","defineProperty","set","get","bind","addDialogProperties","shimDialogElement","current","useEffect","dialogNode","closingBecauseOfProp","focus","handleClose","rect","getBoundingClientRect","top","clientY","height","left","clientX","width","tabIndex","refs","map","textContent","find","value","forEach","Drawer","ariaLabel","closeButtonText","closeButtonVariation","footerBody","footerTitle","hasFocusTrap","heading","headingId","userHeadingId","headingLevel","headingRef","userHeadingRef","isFooterSticky","isHeaderSticky","onCloseClick","useId","Heading","NativeDialog","id","el","t","Wrapper","closeButtonAriaLabel","attributes","events","detail","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseInt","parseJsonAttr","str","JSON","parse","isJsonString"],"sourceRoot":""}