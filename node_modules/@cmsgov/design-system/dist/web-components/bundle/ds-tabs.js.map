{"version":3,"file":"ds-tabs.js","mappings":"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","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Tabs/TabPanel.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Tabs/Tab.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Tabs/Tabs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-tabs/ds-tabs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import classnames from 'classnames';\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nexport const TabPanel = props => {\n  const classes = classnames('ds-c-tabs__panel', props.className);\n  return /*#__PURE__*/_jsx(\"div\", {\n    \"aria-labelledby\": props.tabId,\n    \"aria-hidden\": !props.selected,\n    className: classes,\n    id: props.id,\n    role: \"tabpanel\",\n    children: props.children\n  });\n};\n\n// Set component name to make child.type.displayName available to other components (eg. Tab)\nTabPanel.displayName = 'TabPanel';\nTabPanel.defaultProps = {\n  selected: false\n};\nexport default TabPanel;","import { forwardRef } from \"preact/compat\";\nimport classnames from 'classnames';\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nexport const Tab = forwardRef((props, ref) => {\n  const defaultProps = {\n    selected: false\n  };\n  const href = props.href || `#${props.panelId}`;\n  const classes = classnames('ds-c-tabs__item', props.className);\n  const sharedTabProps = {\n    role: 'tab',\n    className: classes,\n    id: props.id,\n    ref: ref\n  };\n  const handleClick = evt => {\n    const {\n      onClick,\n      panelId,\n      id\n    } = props;\n    if (onClick) {\n      onClick(evt, panelId, id, href);\n    }\n  };\n  const handleKeyDown = evt => {\n    const {\n      onKeyDown,\n      panelId,\n      id\n    } = props;\n    if (onKeyDown) {\n      onKeyDown(evt, panelId, id, href);\n    }\n  };\n  return !props.disabled ? /*#__PURE__*/_jsx(\"a\", {\n    \"aria-selected\": props.selected || defaultProps.selected,\n    \"aria-controls\": props.panelId,\n    href: href,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    ...sharedTabProps,\n    children: props.children\n  }) : /*#__PURE__*/_jsx(\"span\", {\n    \"aria-disabled\": \"true\",\n    ...sharedTabProps,\n    children: props.children\n  });\n});\nTab.displayName = 'Tab';\nexport default Tab;","import { Children, cloneElement, isValidElement, useState, useRef } from \"preact/compat\";\nimport React from \"preact/compat\";\nimport Tab from \"./Tab\";\nimport TabPanel from \"./TabPanel\";\nimport classnames from 'classnames';\nimport get from 'lodash/get';\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/** CONSTANTS\n * Adding in the constant values for keycodes\n * to handle onKeyDown events\n */\nconst LEFT_ARROW = 'ArrowLeft';\nconst RIGHT_ARROW = 'ArrowRight';\n\n/**\n * Determine if a React component is a TabPanel\n * @param {React.Node} child - a React component\n * @return {Boolean} Is this a TabPanel component?\n */\nconst isTabPanel = child => {\n  const componentName = get(child, 'type.displayName') || get(child, 'type.name');\n\n  // Check child.type first and as a fallback, check child.type.displayName follow by child.type.name\n  return child && (child.type === TabPanel || componentName === 'TabPanel');\n};\n\n/**\n * Get the id of the first TabPanel child\n * @param {Object} props\n * @return {String} The id\n */\nconst getDefaultSelectedId = props => {\n  let selectedId;\n\n  // TODO: Use the panelChildren method to pass in an array\n  // of panels, instead of doing it here...\n  Children.forEach(props.children, function (child) {\n    if (isTabPanel(child) && !selectedId) {\n      selectedId = child.props.id;\n    }\n  });\n  return selectedId;\n};\n\n/**\n * Generate an id for a panel's associated tab if one doesn't yet exist\n * @param {Object} TabPanel component\n * @return {String} Tab ID\n */\nconst panelTabId = panel => {\n  return panel.props.tabId ?? `${panel.props.id}__tab`;\n};\n\n/**\n * `Tabs` is a container component that manages the state of your tabs for you.\n * In most cases, you'll want to use this component rather than the\n * presentational components (`Tab`, `TabPanel`) on their own.\n *\n * A `TabPanel` is a presentational component which accepts a tab's content as\n * its `children`.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/tabs/).\n */\nexport const Tabs = props => {\n  const initialSelectedId = props.defaultSelectedId || getDefaultSelectedId(props);\n  const [internalSelectedId, setSelectedId] = useState(initialSelectedId);\n  const isControlled = props.selectedId !== undefined;\n  const selectedId = isControlled ? props.selectedId : internalSelectedId;\n  const ariaProps = props.ariaLabel ? {\n    'aria-label': props.ariaLabel\n  } : {};\n  const listClasses = classnames('ds-c-tabs', props.tablistClassName);\n  // using useRef hook to keep track of elements to focus\n  const tabsRef = useRef({});\n\n  /**\n   * Update the URL in the browser without adding a new entry to the history.\n   * @param {String} url - Absolute or relative URL\n   */\n  const replaceState = url => {\n    if (window.history) {\n      window.history.replaceState({}, document.title, url);\n    }\n  };\n  const panelChildren = () => {\n    return Children.toArray(props.children).filter(isTabPanel);\n  };\n  const handleSelectedTabChange = newSelectedId => {\n    const {\n      onChange\n    } = props;\n    if (onChange) {\n      onChange(newSelectedId, selectedId);\n    }\n    tabsRef.current[newSelectedId].focus();\n    replaceState(tabsRef.current[newSelectedId].href);\n    setSelectedId(newSelectedId);\n  };\n  const handleTabClick = (evt, panelId) => {\n    evt.preventDefault();\n    handleSelectedTabChange(panelId);\n  };\n  const handleTabKeyDown = (evt, panelId) => {\n    const tabs = panelChildren().filter(elem => React.isValidElement(elem));\n    const tabIndex = tabs.findIndex(elem => elem.props.id === panelId);\n    let target;\n    const isDisabled = tab => tab.props.disabled;\n    switch (evt.key) {\n      case LEFT_ARROW:\n        {\n          evt.preventDefault();\n          // If we're on the first tab, make previous the last tab in the list.\n          let prevTabIndex = tabIndex === 0 ? tabs.length - 1 : tabIndex - 1;\n          // If we're on a disabled tab, skip until we find an enabled one.\n          while (isDisabled(tabs[prevTabIndex])) {\n            prevTabIndex = prevTabIndex === 0 ? tabs.length - 1 : prevTabIndex - 1;\n          }\n          target = tabs[prevTabIndex].props.id;\n          handleSelectedTabChange(target);\n          break;\n        }\n      case RIGHT_ARROW:\n        {\n          evt.preventDefault();\n          // If we're on the last tab, make next tab the first in the list.\n          let nextTabIndex = tabIndex === tabs.length - 1 ? 0 : tabIndex + 1;\n          // If we're on a disabled tab, skip until we find an enabled one.\n          while (isDisabled(tabs[nextTabIndex])) {\n            nextTabIndex = nextTabIndex === tabs.length - 1 ? 0 : nextTabIndex + 1;\n          }\n          target = tabs[nextTabIndex].props.id;\n          handleSelectedTabChange(target);\n          break;\n        }\n      default:\n        break;\n    }\n  };\n  const renderChildren = () => {\n    return Children.map(props.children, child => {\n      if (isTabPanel(child) && isValidElement(child)) {\n        // Extend props on panels before rendering. Also removes any props\n        // that don't need passed into TabPanel but are used to generate\n        // the Tab components\n        return cloneElement(child, {\n          selected: selectedId === child.props.id,\n          tab: undefined,\n          tabHref: undefined,\n          tabId: panelTabId(child)\n        });\n      }\n      return child;\n    });\n  };\n  const renderTabs = () => {\n    const panels = panelChildren();\n    const tabs = panels.map(panel => {\n      return /*#__PURE__*/_jsx(Tab, {\n        className: panel.props.tabClassName,\n        href: panel.props.tabHref,\n        disabled: panel.props.disabled,\n        id: panelTabId(panel),\n        onClick: handleTabClick,\n        onKeyDown: handleTabKeyDown,\n        panelId: panel.props.id,\n        ref: tab => {\n          tabsRef.current[panel.props.id] = tab;\n        },\n        selected: selectedId === panel.props.id,\n        children: panel.props.tab\n      }, panel.key);\n    });\n    return tabs;\n  };\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: listClasses,\n      role: \"tablist\",\n      ...ariaProps,\n      children: renderTabs()\n    }), renderChildren()]\n  });\n};\nexport default Tabs;","import { define } from \"../preactement/define\";\nimport { Tabs, TabPanel } from \"../../Tabs\";\nimport { parseBooleanAttr, parseJsonAttr } from \"../wrapperUtils\";\nimport { createElement } from \"preact/compat\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['default-selected-id', 'selected-id', 'tablist-class-name', 'tabs-aria-label'];\nfunction parseChildren(nodes) {\n  return nodes.map(element => {\n    const attrs = element.props;\n    if (!attrs.id || !attrs.children || !attrs.tab) {\n      console.warn('Each child passed to `ds-tabs` must include `id` and `children` attributes for `TabPanel` functionality.');\n      return null;\n    }\n    const {\n      id,\n      children,\n      'class-name': className,\n      selected: selected,\n      disabled: disabled,\n      tab: tab,\n      'tab-class-name': tabClassName,\n      'tab-href': tabHref,\n      'tab-id': tabId,\n      ...otherAttributes\n    } = attrs;\n    const props = {\n      id,\n      className,\n      selected: parseBooleanAttr(selected),\n      disabled: parseBooleanAttr(disabled),\n      tab: parseJsonAttr(tab),\n      tabClassName,\n      tabHref,\n      tabId\n    };\n    return createElement(TabPanel, {\n      ...props,\n      ...otherAttributes\n    }, children);\n  });\n}\nconst Wrapper = _ref => {\n  let {\n    tabsAriaLabel,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsx(Tabs, {\n    ...props,\n    ariaLabel: tabsAriaLabel,\n    children: parseChildren(props.children)\n  });\n};\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-enable */\n\ndefine('ds-tabs', () => Wrapper, {\n  attributes,\n  events: [['onChange', (selectedId, prevSelectedId) => ({\n    detail: {\n      selectedId,\n      prevSelectedId\n    }\n  })]]\n});","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["TabPanel","props","classes","className","tabId","selected","id","role","children","displayName","defaultProps","Tab","forwardRef","ref","href","panelId","sharedTabProps","disabled","onClick","evt","onKeyDown","isTabPanel","child","componentName","type","panelTabId","panel","initialSelectedId","defaultSelectedId","selectedId","Children","getDefaultSelectedId","internalSelectedId","setSelectedId","useState","undefined","ariaProps","ariaLabel","listClasses","tablistClassName","tabsRef","useRef","panelChildren","filter","handleSelectedTabChange","newSelectedId","onChange","url","current","focus","window","history","replaceState","document","title","handleTabClick","preventDefault","handleTabKeyDown","tabs","elem","tabIndex","findIndex","target","isDisabled","tab","key","prevTabIndex","length","nextTabIndex","map","tabClassName","tabHref","isValidElement","cloneElement","Wrapper","_ref","tabsAriaLabel","nodes","element","attrs","console","warn","otherAttributes","createElement","attributes","events","prevSelectedId","detail","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseInt","parseJsonAttr","str","JSON","parse","e","isJsonString"],"sourceRoot":""}