{"version":3,"file":"ds-button.js","mappings":"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","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Button/Button.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Button/useButtonAnalytics.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/analytics/getAnalyticsContentFromRefs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/mergeRefs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/analytics.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-button/ds-button.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/shared-attributes/analytics.js"],"sourcesContent":["import classNames from 'classnames';\nimport mergeRefs from \"../utilities/mergeRefs\";\nimport useButtonAnalytics from \"./useButtonAnalytics\";\n\n// Collect all the additional properties that one could supply to a button component\n// that will be passed down to whatever element or component is being used. This is\n// generally permissive in order to keep the typing simple at the expense of being\n// more accurate. In a previous version of this, `OtherProps` was generic so that we\n// could extract any props from a custom component that is being passed in; however,\n// we are deprecating that prop because it's not actually needed and creates\n// unnecessary complexity that we have to maintain.\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/button/).\n */\nexport const Button = props => {\n  const {\n    analytics,\n    analyticsLabelOverride,\n    analyticsParentHeading,\n    analyticsParentType,\n    onAnalyticsEvent,\n    children,\n    className,\n    inputRef,\n    isAlternate,\n    onClick,\n    onDark,\n    size,\n    variation,\n    ...otherProps\n  } = props;\n  const {\n    contentRef,\n    sendButtonEvent\n  } = useButtonAnalytics(props);\n  const ComponentType = props.href ? 'a' : 'button';\n  const colorSchemeClass = isAlternate && `ds-c-button--alternate`;\n  const modeClass = onDark && `ds-c-button--on-dark`;\n  const sizeClass = size && `ds-c-button--${size}`;\n  const variationClass = variation && `ds-c-button--${variation}`;\n  const allClassNames = classNames('ds-c-button', colorSchemeClass, modeClass, sizeClass, variationClass, className);\n  const attrs = {\n    ...otherProps,\n    className: allClassNames\n  };\n  if (ComponentType !== 'button') {\n    delete attrs.disabled;\n    delete attrs.type;\n    if (props.disabled) {\n      attrs.role = 'link';\n      attrs['aria-disabled'] = true;\n      delete attrs.href;\n    }\n  }\n  function handleClick(e) {\n    if (!props.disabled) {\n      sendButtonEvent();\n      if (onClick) {\n        onClick(e);\n      }\n    }\n  }\n  function handleKeyPress(e) {\n    // Trigger onClick on space key event for `<a>` elements\n    if (e.key === ' ') {\n      handleClick(e);\n    }\n  }\n  return /*#__PURE__*/_jsx(ComponentType, {\n    ref: mergeRefs([inputRef, contentRef]),\n    onClick: handleClick,\n    onKeyPress: ComponentType === 'a' ? handleKeyPress : undefined,\n    ...attrs,\n    children: children\n  });\n};\nButton.defaultProps = {\n  isAlternate: false,\n  onDark: false,\n  type: 'button'\n};\nexport default Button;","import { config } from \"../config\";\nimport { getAnalyticsContentFromRefs, eventExtensionText } from \"../analytics\";\nimport { useRef } from \"preact/compat\";\nexport default function useButtonAnalytics(_ref) {\n  let {\n    analytics,\n    analyticsLabelOverride,\n    analyticsParentHeading,\n    analyticsParentType,\n    href,\n    onAnalyticsEvent = config().defaultAnalyticsFunction,\n    type,\n    variation\n  } = _ref;\n  const contentRef = useRef();\n  function sendButtonEvent() {\n    if (analytics !== true && (!config().buttonSendsAnalytics || analytics === false)) {\n      return;\n    }\n    const buttonText = analyticsLabelOverride ?? getAnalyticsContentFromRefs([contentRef]);\n    const buttonStyle = variation ?? 'default';\n    const buttonType = type ?? 'button';\n    const buttonParentHeading = analyticsParentHeading ?? ' ';\n    const buttonParentType = analyticsParentType ?? ' ';\n    return onAnalyticsEvent({\n      event_name: 'button_engagement',\n      event_extension: eventExtensionText,\n      text: buttonText,\n      button_style: buttonStyle,\n      button_type: href ? 'link' : buttonType,\n      parent_component_heading: buttonParentHeading,\n      parent_component_type: buttonParentType,\n      ...(href ? {\n        link_url: href\n      } : {})\n    });\n  }\n  return {\n    contentRef,\n    sendButtonEvent\n  };\n}","export function getAnalyticsContentFromRefs(refs) {\n  return refs.map(ref => ref.current?.textContent).find(textContent => textContent);\n}\nexport default getAnalyticsContentFromRefs;","/**\n * Combines multiple refs into one, even old-style ref functions\n *\n * Borrowed from https://github.com/gregberge/react-merge-refs/blob/main/src/index.tsx\n */\nexport default function mergeRefs(refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}","import { config } from \"../config\";\n\n/**\n * The web component event configuration to pass into the define function's `events`\n * option that will allow users to override the default analytics function by creating\n * an event listener for the `ds-analytics-event` event and calling the `preventDefault`\n * function.\n *\n * For example,\n *\n * define('ds-button', () => Wrapper, { attributes, events: ['onClick', onAnalyticsEvent] });\n */\nexport const onAnalyticsEvent = ['onAnalyticsEvent', event => {\n  let callDefaultAnalyticsFunction = true;\n  function preventDefault() {\n    callDefaultAnalyticsFunction = false;\n  }\n\n  // Give event listeners a chance to prevent default before we execute the default\n  // analytics function from the config.\n  setTimeout(() => {\n    if (callDefaultAnalyticsFunction) {\n      config().defaultAnalyticsFunction(event);\n    }\n  }, 10);\n  return {\n    detail: {\n      event\n    },\n    preventDefault\n  };\n}];","import { define } from \"../preactement/define\";\nimport Button from \"../../Button/Button\";\nimport { analyticsOverrideAttrs, analyticsParentDataAttrs } from \"../shared-attributes/analytics\";\nimport { onAnalyticsEvent } from \"../analytics\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['class-name', 'disabled', 'href', 'is-alternate', 'is-on-dark', 'size', 'type', 'variation', 'target', ...analyticsOverrideAttrs, ...analyticsParentDataAttrs];\n\n// Mapping `onDark` to `isOnDark` because props starting with \"on\" indicate an event handler and tests fail due to this expectation\n\nconst Wrapper = _ref => {\n  let {\n    isAlternate,\n    isOnDark,\n    analytics,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(Button, {\n    ...otherProps,\n    isAlternate: isAlternate && Boolean(JSON.parse(isAlternate)),\n    onDark: isOnDark && Boolean(JSON.parse(isOnDark)),\n    analytics: analytics && Boolean(JSON.parse(analytics))\n  });\n};\ndefine('ds-button', () => Wrapper, {\n  attributes,\n  events: ['onClick', onAnalyticsEvent]\n});","// Refer to the AnalyticsOverrideProps and AnalyticsParentDataProps types\n\nexport const analyticsOverrideAttrs = ['analytics', 'analytics-label-override'];\nexport const analyticsParentDataAttrs = ['analytics-parent-heading', 'analytics-parent-type'];"],"names":["Button","props","analytics","analyticsLabelOverride","analyticsParentHeading","analyticsParentType","onAnalyticsEvent","children","className","inputRef","isAlternate","onClick","onDark","size","variation","otherProps","contentRef","sendButtonEvent","_ref","href","config","defaultAnalyticsFunction","type","useRef","buttonSendsAnalytics","buttonText","getAnalyticsContentFromRefs","buttonStyle","buttonType","buttonParentHeading","buttonParentType","event_name","event_extension","text","button_style","button_type","parent_component_heading","parent_component_type","link_url","useButtonAnalytics","ComponentType","colorSchemeClass","modeClass","sizeClass","variationClass","attrs","handleClick","e","disabled","role","ref","mergeRefs","onKeyPress","key","undefined","defaultProps","refs","map","current","textContent","find","value","forEach","event","callDefaultAnalyticsFunction","setTimeout","detail","preventDefault","attributes","Wrapper","isOnDark","Boolean","JSON","parse","events","analyticsOverrideAttrs","analyticsParentDataAttrs"],"sourceRoot":""}