{"version":3,"file":"ds-modal-dialog.js","mappings":"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","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/CloseIconThin.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/SvgIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/NativeDialog/NativeDialog.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/NativeDialog/shim.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/analytics/getAnalyticsContentFromRefs.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/usePrevious.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/CloseButton/CloseButton.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Dialog/useBodyScrollPrevention.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Dialog/Dialog.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Dialog/useDialogAnalytics.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/NativeDialog/useNativeDialogAnalytics.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-modal-dialog/ds-modal-dialog.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/shared-attributes/analytics.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import { t } from \"../i18n\";\nimport { SvgIcon } from \"./SvgIcon\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst defaultProps = {\n  className: '',\n  viewBox: '-2 -2 18 18'\n};\nexport function CloseIconThin(props) {\n  const iconCssClasses = `ds-c-icon--close ds-c-icon--close-thin ${props.className || ''}`;\n  return /*#__PURE__*/_jsx(SvgIcon, {\n    title: t('icons.close'),\n    ...defaultProps,\n    ...props,\n    className: iconCssClasses,\n    children: /*#__PURE__*/_jsx(\"path\", {\n      fill: \"none\",\n      stroke: \"currentColor\",\n      strokeLinecap: \"round\",\n      strokeWidth: \"2\",\n      d: \"M0 13.0332964L13.0332964 0M13.0332964 13.0332964L0 0\"\n    })\n  });\n}","import classNames from 'classnames';\nimport useId from \"../utilities/useId\";\n\n// a type for react icon components that makes the 'title' prop optional & removes 'children' from type\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const SvgIcon = _ref => {\n  let {\n    ariaHidden,\n    className,\n    children,\n    description,\n    id,\n    inversed,\n    title,\n    viewBox,\n    ...otherProps\n  } = _ref;\n  const svgClasses = classNames('ds-c-icon', {\n    'ds-c-icon--inverse': inversed\n  }, className);\n  const rootId = useId('icon--', id);\n  const titleId = `${rootId}__title`;\n  const descriptionId = `${rootId}__desc`;\n  const ariaLabelledBy = description ? `${titleId} ${descriptionId}` : titleId;\n  const isSrVisible = !ariaHidden;\n  const screenReaderProps = {};\n  if (isSrVisible) {\n    screenReaderProps['aria-labelledby'] = ariaLabelledBy;\n    screenReaderProps['role'] = 'img';\n  }\n  return /*#__PURE__*/_jsxs(\"svg\", {\n    \"aria-hidden\": ariaHidden,\n    className: svgClasses,\n    id: id ?? isSrVisible ? rootId : undefined,\n    viewBox: viewBox,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ...screenReaderProps,\n    ...otherProps,\n    children: [isSrVisible && /*#__PURE__*/_jsx(\"title\", {\n      id: titleId,\n      children: title\n    }), isSrVisible && description && /*#__PURE__*/_jsx(\"desc\", {\n      id: descriptionId,\n      children: description\n    }), children]\n  });\n};\nSvgIcon.defaultProps = {\n  ariaHidden: true,\n  inversed: false\n};","import { useRef, useEffect, useLayoutEffect } from \"preact/compat\";\nimport { shimDialogElement } from \"./shim\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * This is an internal component and may change without warning. Use at your own risk!\n */\nexport const NativeDialog = _ref => {\n  let {\n    children,\n    exit,\n    isOpen,\n    showModal,\n    backdropClickExits,\n    boundingBoxRef,\n    ...dialogProps\n  } = _ref;\n  const dialogRef = useRef(null);\n  if (isOpen === undefined) {\n    const missingPropMessage = \"The 'isOpen' prop is now used to control the state of Dialogs and Drawers. Please do not conditionally render these components to control their state. All Dialogs and Drawers will become invisible without this prop in the next major release. Using this prop will fix a focus-management issue that affects accessibility.\";\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(missingPropMessage);\n    } else {\n      console.error(missingPropMessage);\n      isOpen = true;\n    }\n  }\n\n  // Register dialog with the polyfill if necessary\n  useLayoutEffect(() => {\n    shimDialogElement(dialogRef.current);\n  });\n\n  // Call imperative show and close functions on mount/unmount\n  useEffect(() => {\n    const dialogNode = dialogRef.current;\n\n    // Show or hide the dialog based on `isOpen` value. The `dialogNode.open` property is\n    // a read-only value that will tell us if our dialog DOM element is actually in the\n    // open state.\n    let closingBecauseOfProp = false;\n    if (isOpen) {\n      if (!dialogNode.open) {\n        showModal ? dialogNode.showModal() : dialogNode.show();\n        // For a11y reasons, focus needs to be specified:\n        // 1. `<dialog>` receives focus first\n        // 2. `<dialog>` close button receives focus next\n        // 3. If `<dialog>` has some sorta sticky positioning requiring keyboard navigation, that wrapping element should receive focus next.\n        dialogNode.focus();\n      }\n    } else {\n      if (dialogNode.open) {\n        dialogNode.close();\n        closingBecauseOfProp = true;\n      }\n    }\n\n    // Bind close event listener for ESC press\n    const handleClose = event => {\n      event.preventDefault();\n      // Only call the exit handler if the parent didn't close it by setting isOpen to false\n      if (!closingBecauseOfProp) {\n        exit(event);\n      }\n    };\n    dialogNode.addEventListener('close', handleClose);\n    return () => {\n      dialogNode.removeEventListener('close', handleClose);\n    };\n  }, [isOpen, showModal, exit]);\n\n  // Bind and unbind backdrop click event listeners on mount and unmount\n  useEffect(() => {\n    if (!backdropClickExits) {\n      return;\n    }\n    const dialogNode = dialogRef.current;\n    const handleClick = event => {\n      const boundingNode = boundingBoxRef?.current ?? dialogRef.current;\n      const rect = boundingNode.getBoundingClientRect();\n      const isInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;\n      if (!isInDialog) {\n        exit(event);\n      }\n    };\n    dialogNode.addEventListener('click', handleClick);\n    return () => {\n      dialogNode.removeEventListener('click', handleClick);\n    };\n  }, [exit, backdropClickExits]);\n  return /*#__PURE__*/_jsx(\"dialog\", {\n    ref: dialogRef,\n    ...dialogProps,\n    tabIndex: -1,\n    children: children\n  });\n};\nexport default NativeDialog;","/**\n * This polyfill originally came from https://github.com/GoogleChrome/dialog-polyfill/,\n * but we've stripped it down to only what we need to not crash node environments that\n * do not yet support the dialog element.\n */\n\n/**\n * Add shims for dialog functions and properties to the provided element object.\n */\nfunction addDialogProperties(dialog) {\n  function handleKey(event) {\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      dialog.close();\n    }\n  }\n  function setOpen(open) {\n    if (open) {\n      dialog.hasAttribute('open') || dialog.setAttribute('open', '');\n      document.addEventListener('keydown', handleKey);\n    } else {\n      dialog.removeAttribute('open');\n      document.removeEventListener('keydown', handleKey);\n    }\n  }\n  dialog.show = () => setOpen(true);\n  dialog.showModal = () => setOpen(true);\n  dialog.close = () => {\n    setOpen(false);\n    const cancelEvent = new CustomEvent('close', {\n      bubbles: false,\n      cancelable: true\n    });\n    dialog.dispatchEvent(cancelEvent);\n  };\n\n  // Set a11y role. Browsers that support dialog implicitly know this already.\n  if (!dialog.hasAttribute('role')) {\n    dialog.setAttribute('role', 'dialog');\n  }\n  if (!('returnValue' in dialog)) {\n    dialog.returnValue = '';\n  }\n  Object.defineProperty(dialog, 'open', {\n    set: setOpen,\n    get: dialog.hasAttribute.bind(dialog, 'open')\n  });\n}\nexport function shimDialogElement(element) {\n  if (!element.showModal) {\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to polyfill dialog: The element is not a dialog.');\n    }\n    addDialogProperties(element);\n  }\n}","export function getAnalyticsContentFromRefs(refs) {\n  return refs.map(ref => ref.current?.textContent).find(textContent => textContent);\n}\nexport default getAnalyticsContentFromRefs;","import { useEffect, useRef } from \"preact/compat\";\n\n// storing a previous version of a prop for comparison\n// similar to the old previousProps param from `componentDidUpdate`\nconst usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePrevious;","import classNames from 'classnames';\nimport useId from \"../utilities/useId\";\nimport { CloseIconThin } from \"../Icons\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n *\n */\nexport const CloseButton = _ref => {\n  let {\n    className,\n    id: idProp,\n    ariaHidden = false,\n    ...buttonAttributes\n  } = _ref;\n  const id = useId('close-button--', idProp);\n  return /*#__PURE__*/_jsx(\"button\", {\n    type: \"button\",\n    ...buttonAttributes,\n    className: classNames('ds-c-close-button', className),\n    id: id,\n    children: /*#__PURE__*/_jsx(CloseIconThin, {\n      ariaHidden: ariaHidden,\n      id: `${id}__icon`\n    })\n  });\n};\nexport default CloseButton;","import { useLayoutEffect } from \"preact/compat\";\nexport const CLASS_NAME = 'ds--dialog-open';\nexport const PROPERTY_NAME = '--body_top--dialog-open';\nfunction freezeScroll() {\n  if (document.body.classList.contains(CLASS_NAME)) {\n    return;\n  }\n  const y = window.scrollY ?? 0;\n  document.body.classList.add(CLASS_NAME);\n  document.body.style.setProperty(PROPERTY_NAME, `-${y}px`);\n  document.documentElement.style.setProperty('scroll-behavior', 'auto');\n}\nfunction unfreezeScroll() {\n  if (!document.body.classList.contains(CLASS_NAME)) {\n    return;\n  }\n  document.body.classList.remove(CLASS_NAME);\n  const top = -parseInt(document.body.style.getPropertyValue(PROPERTY_NAME));\n  document.body.style.removeProperty(PROPERTY_NAME);\n  if (!isNaN(top)) {\n    window.scrollTo({\n      top,\n      behavior: 'auto'\n    });\n  }\n  document.documentElement.style.removeProperty('scroll-behavior');\n}\n\n/**\n * Prevents scrolling the page behind the dialog\n */\nexport function useBodyScrollPrevention(isOpen) {\n  // Needs to use useLayoutEffect because we need to grab the window scroll position\n  // before the dialog renders and messes it up.\n  useLayoutEffect(() => {\n    if (isOpen) {\n      freezeScroll();\n    } else {\n      unfreezeScroll();\n    }\n    return () => {\n      unfreezeScroll();\n    };\n  }, [isOpen]);\n}","import { useEffect, useRef } from \"preact/compat\";\nimport CloseButton from \"../CloseButton/CloseButton\";\nimport NativeDialog from \"../NativeDialog/NativeDialog\";\nimport classNames from 'classnames';\nimport useDialogAnalytics from \"./useDialogAnalytics\";\nimport useId from \"../utilities/useId\";\nimport { t } from \"../i18n\";\nimport { useBodyScrollPrevention } from \"./useBodyScrollPrevention\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/modal-dialog/).\n */\nexport const Dialog = props => {\n  const {\n    actions,\n    actionsClassName,\n    alert,\n    analytics,\n    analyticsLabelOverride,\n    onAnalyticsEvent,\n    ariaCloseLabel,\n    children,\n    className,\n    headerClassName,\n    heading,\n    id,\n    onExit,\n    size,\n    ...modalProps\n  } = props;\n  const rootId = useId('dialog--', id);\n  const headingRef = useDialogAnalytics(props);\n  const headingId = `${rootId}__heading`;\n  const contentId = `${rootId}__content`;\n  const dialogClassNames = classNames('ds-c-dialog', className, size && `ds-c-dialog--${size}`);\n  const headerClassNames = classNames('ds-c-dialog__header', headerClassName);\n  const actionsClassNames = classNames('ds-c-dialog__actions', actionsClassName);\n  const containerRef = useRef();\n\n  // Set initial focus\n  useEffect(() => {\n    containerRef.current?.focus();\n  }, [containerRef]);\n  useBodyScrollPrevention(modalProps.isOpen ?? true);\n  return /*#__PURE__*/_jsx(NativeDialog, {\n    className: dialogClassNames,\n    showModal: true,\n    exit: onExit,\n    ...modalProps,\n    id: rootId,\n    boundingBoxRef: containerRef,\n    \"aria-labelledby\": headingId,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"ds-c-dialog__window\",\n      ref: containerRef,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: headerClassNames,\n        children: [heading && /*#__PURE__*/_jsx(\"h2\", {\n          className: \"ds-c-dialog__heading\",\n          id: headingId,\n          ref: headingRef,\n          children: heading\n        }), /*#__PURE__*/_jsx(CloseButton, {\n          \"aria-label\": ariaCloseLabel ?? t('dialog.ariaCloseLabel'),\n          ariaHidden: true,\n          className: \"ds-c-dialog__close\",\n          id: `${rootId}__close`,\n          onClick: onExit\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"ds-c-dialog__body\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          id: contentId,\n          children: children\n        }), actions && /*#__PURE__*/_jsx(\"div\", {\n          className: actionsClassNames,\n          children: actions\n        })]\n      })]\n    })\n  });\n};\nexport default Dialog;","import { eventExtensionText } from \"../analytics\";\nimport { config } from \"../config\";\nimport { useNativeDialogAnalytics } from \"../NativeDialog/useNativeDialogAnalytics\";\nexport function useDialogAnalytics(_ref) {\n  let {\n    analytics,\n    analyticsLabelOverride,\n    onAnalyticsEvent = config().defaultAnalyticsFunction,\n    isOpen\n  } = _ref;\n  function sendDialogEvent(content, eventAttributes) {\n    if (analytics !== true && (!config().dialogSendsAnalytics || analytics === false)) {\n      return;\n    }\n    const eventHeadingText = analyticsLabelOverride ?? content;\n    if (!eventHeadingText) {\n      console.error('No content found for Dialog analytics event');\n      return;\n    }\n    onAnalyticsEvent({\n      event_extension: eventExtensionText,\n      heading: eventHeadingText,\n      ...eventAttributes\n    });\n  }\n\n  // We need to send modal_impression when it's open once and only once.\n  // We need to send modal_closed only when it was open and then closed.\n  const headingRef = useNativeDialogAnalytics({\n    isOpen,\n    onOpen: content => {\n      sendDialogEvent(content, {\n        event_name: 'modal_impression'\n      });\n    },\n    onClose: content => {\n      sendDialogEvent(content, {\n        event_name: 'modal_closed'\n      });\n    }\n  });\n  return headingRef;\n}\nexport default useDialogAnalytics;","import { useRef, useEffect } from \"preact/compat\";\nimport getAnalyticsContentFromRefs from \"../analytics/getAnalyticsContentFromRefs\";\nimport usePrevious from \"../utilities/usePrevious\";\n/**\n * This hook is for any component based on `NativeDialog` that needs analytics that fire\n * upon opening and closing. You provide it the `isOpen` prop being passed to the\n * `NativeDialog` and handlers for `onOpen` and `onClose`, which will be called with the\n * rendered heading content based on where you apply the ref this hook returns. Example:\n *\n * const headingRef = useNativeDialogAnalytics({\n *   isOpen: props.isOpen,\n *   onOpen: (content) => {\n *     // Send an event\n *   },\n *  onClose: (content) => {\n *     // Send an event\n *   }\n * })\n *\n * return (\n *   <NativeDialog {...props}>\n *     <h1 ref={headingRef}>Hello World</h1>\n *   </NativeDialog>\n * )\n */\nexport function useNativeDialogAnalytics(_ref) {\n  let {\n    isOpen,\n    onOpen,\n    onClose\n  } = _ref;\n  const headingRef = useRef();\n  const prevIsOpen = usePrevious(isOpen);\n  useEffect(() => {\n    const headingContent = getAnalyticsContentFromRefs([headingRef]);\n    // We want to call onOpen when it's open once and only once.\n    // We want to call onClose only when it was open and then closed.\n    if (isOpen && isOpen !== prevIsOpen) {\n      // It either started open or was closed and now is open\n      onOpen(headingContent);\n    } else if (!isOpen && prevIsOpen === true) {\n      // Only trigger if it was previously open\n      onClose(headingContent);\n    }\n  }, [isOpen, prevIsOpen]);\n  return headingRef;\n}","import { define } from \"../preactement/define\";\nimport { Dialog } from \"../../Dialog\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { analyticsOverrideAttrs } from \"../shared-attributes/analytics\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['actions-class-name', 'alert', 'backdrop-click-exits', 'dialog-close-label', 'class-name', 'header-class-name', 'heading', 'root-id', 'is-open', 'size', ...analyticsOverrideAttrs];\nconst isAcceptableSize = size => {\n  return ['narrow', 'wide', 'full'].includes(size);\n};\nconst Wrapper = _ref => {\n  let {\n    alert,\n    analytics,\n    backdropClickExits,\n    children,\n    dialogCloseLabel,\n    isOpen,\n    rootId,\n    size,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(Dialog, {\n    id: rootId,\n    alert: parseBooleanAttr(alert),\n    ariaCloseLabel: dialogCloseLabel,\n    backdropClickExits: parseBooleanAttr(backdropClickExits),\n    isOpen: parseBooleanAttr(isOpen),\n    size: isAcceptableSize(size) ? size : null,\n    ...otherProps,\n    analytics: parseBooleanAttr(analytics),\n    children: children\n  });\n};\ndefine('ds-modal-dialog', () => Wrapper, {\n  attributes,\n  events: ['onAnalyticsEvent', 'onExit']\n});","// Refer to the AnalyticsOverrideProps and AnalyticsParentDataProps types\n\nexport const analyticsOverrideAttrs = ['analytics', 'analytics-label-override'];\nexport const analyticsParentDataAttrs = ['analytics-parent-heading', 'analytics-parent-type'];","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["defaultProps","className","viewBox","CloseIconThin","props","iconCssClasses","title","t","children","fill","stroke","strokeLinecap","strokeWidth","d","SvgIcon","_ref","ariaHidden","description","id","inversed","otherProps","svgClasses","rootId","titleId","descriptionId","ariaLabelledBy","isSrVisible","screenReaderProps","undefined","xmlns","exit","isOpen","showModal","backdropClickExits","boundingBoxRef","dialogProps","dialogRef","useRef","missingPropMessage","console","error","useLayoutEffect","element","localName","Error","dialog","handleKey","event","keyCode","preventDefault","stopPropagation","close","setOpen","open","hasAttribute","setAttribute","document","addEventListener","removeAttribute","removeEventListener","show","cancelEvent","CustomEvent","bubbles","cancelable","dispatchEvent","returnValue","Object","defineProperty","set","get","bind","addDialogProperties","shimDialogElement","current","useEffect","dialogNode","closingBecauseOfProp","focus","handleClose","handleClick","rect","getBoundingClientRect","top","clientY","height","left","clientX","width","ref","tabIndex","getAnalyticsContentFromRefs","refs","map","textContent","find","value","idProp","buttonAttributes","useId","type","CLASS_NAME","PROPERTY_NAME","unfreezeScroll","body","classList","contains","remove","parseInt","style","getPropertyValue","removeProperty","isNaN","window","scrollTo","behavior","documentElement","Dialog","actions","actionsClassName","alert","analytics","analyticsLabelOverride","onAnalyticsEvent","ariaCloseLabel","headerClassName","heading","onExit","size","modalProps","headingRef","config","defaultAnalyticsFunction","sendDialogEvent","content","eventAttributes","dialogSendsAnalytics","eventHeadingText","event_extension","onOpen","onClose","prevIsOpen","usePrevious","headingContent","useNativeDialogAnalytics","event_name","headingId","contentId","dialogClassNames","headerClassNames","actionsClassNames","containerRef","y","scrollY","add","setProperty","freezeScroll","NativeDialog","onClick","attributes","isAcceptableSize","includes","Wrapper","dialogCloseLabel","events","analyticsOverrideAttrs","analyticsParentDataAttrs","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseJsonAttr","str","JSON","parse","e","isJsonString"],"sourceRoot":""}