{"version":3,"file":"ds-choice.js","mappings":"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","sources":["webpack://DesignSystem/./node_modules/ev-emitter/ev-emitter.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/ChoiceList/Choice.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Hint/Hint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Hint/useHint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/AlertCircleIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/SvgIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/InlineError/InlineError.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/InlineError/useInlineError.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Label/Label.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Label/useLabelProps.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/cleanFieldProps.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/describeField.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/findElementsOfType.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/utilities/mergeIds.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/ChoiceList/ChoiceList.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-choice/ds-choice-list.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-choice/ds-choice.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/shared-attributes/form.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( global, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD - RequireJS\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\"use strict\";\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice(0);\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( var i=0; i < listeners.length; i++ ) {\n    var listener = listeners[i]\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n};\n\nreturn EvEmitter;\n\n}));\n","import { useEffect, useState } from \"preact/compat\";\nimport EvEmitter from 'ev-emitter';\nimport classNames from 'classnames';\nimport useId from \"../utilities/useId\";\nimport { InlineError } from \"../InlineError\";\nimport { Label } from \"../Label\";\nimport { useLabelProps } from \"../Label/useLabelProps\";\nimport { useHint } from \"../Hint/useHint\";\nimport cleanFieldProps from \"../utilities/cleanFieldProps\";\nimport describeField from \"../utilities/describeField\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/** Used to emit events to all Choice components */\nconst dsChoiceEmitter = new EvEmitter();\n\n/**\n * This component passes any additional props to its underlying input element\n * as attributes. See the corresponding MDN documentation for\n * [input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) for\n * a list of valid attributes.\n\n * For information about how and when to use this component, refer to the\n * [checkbox](https://design.cms.gov/components/checkbox/) and\n * [radio](https://design.cms.gov/components/radio/) documentation pages.\n */\n\nexport const Choice = _ref => {\n  let {\n    _choiceChild,\n    ...props\n  } = _ref;\n  const initialCheckedState = props.checked ?? props.defaultChecked;\n  const [internalCheckedState, setChecked] = useState(initialCheckedState);\n  const isControlled = props.checked !== undefined;\n  const checked = isControlled ? props.checked : internalCheckedState;\n  const radioCheckedEventName = `${props.name}-radio-checked`;\n  const id = useId('choice--', props.id);\n  const {\n    hintId,\n    hintElement\n  } = useHint({\n    ...props,\n    id\n  });\n  const labelProps = useLabelProps({\n    ...props,\n    id\n  });\n  let errorId;\n  let errorElement;\n  if (!_choiceChild) {\n    errorId = props.errorId ?? `${id}__error`;\n    errorElement = /*#__PURE__*/_jsx(InlineError, {\n      id: errorId,\n      inversed: props.inversed,\n      className: props.errorMessageClassName,\n      children: props.errorMessage\n    });\n  }\n\n  // Subscribe to changes from other radio buttons in the same group\n  useEffect(() => {\n    // This logic only applies to uncontrolled radio groups\n    if (props.type !== 'radio' || isControlled) {\n      return;\n    }\n    const handleRadioChecked = checkedId => {\n      // A radio button in this group was just checked. If it wasn't this one, uncheck this one\n      if (checkedId !== id) {\n        setChecked(false);\n      }\n    };\n    dsChoiceEmitter.on(radioCheckedEventName, handleRadioChecked);\n    return () => {\n      dsChoiceEmitter.off(radioCheckedEventName, handleRadioChecked);\n    };\n  }, [setChecked]);\n  function handleChange(event) {\n    if (props.onChange) {\n      props.onChange(event);\n    }\n    if (!isControlled) {\n      setChecked(event.target.checked);\n      if (props.type === 'radio' && event.target.checked) {\n        // Emit an event so other radio options can uncheck themselves\n        dsChoiceEmitter.emitEvent(radioCheckedEventName, [id]);\n      }\n    }\n  }\n  const {\n    'aria-live': ariaLive,\n    'aria-relevant': ariaRelevant,\n    'aria-atomic': ariaAtomic,\n    className,\n    inversed,\n    inputClassName,\n    inputRef,\n    size,\n    checkedChildren,\n    uncheckedChildren,\n    ...inputProps\n  } = props;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    \"aria-live\": ariaLive ?? (checkedChildren ? 'polite' : null),\n    \"aria-relevant\": ariaRelevant ?? (checkedChildren ? 'additions text' : null),\n    \"aria-atomic\": ariaAtomic ?? (checkedChildren ? 'false' : null),\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"ds-c-choice-wrapper\",\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        ...cleanFieldProps(inputProps),\n        id: id,\n        className: classNames(inputClassName, 'ds-c-choice', {\n          'ds-c-choice--inverse': inversed,\n          'ds-c-choice--small': size === 'small'\n        }),\n        onChange: handleChange,\n        ref: inputRef,\n        \"aria-describedby\": describeField({\n          ...props,\n          errorId,\n          hintId\n        })\n      }), /*#__PURE__*/_jsx(Label, {\n        ...labelProps,\n        fieldId: id\n      }), hintElement, errorElement]\n    }), checked ? checkedChildren : uncheckedChildren]\n  });\n};\nChoice.defaultProps = {\n  _choiceChild: false\n};\nexport default Choice;","import classNames from 'classnames';\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Hints are used in conjunction with a Label to describe individual form fields\n * or fieldsets. They are built in to all form fields in the design system, but\n * they can also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/hint/).\n */\nexport const Hint = _ref => {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    requirementLabel,\n    ...otherProps\n  } = _ref;\n  const hintClasses = classNames('ds-c-hint', inversed && 'ds-c-hint--inverse', className);\n  let hintPadding;\n  if (requirementLabel && children) {\n    if (typeof requirementLabel === 'string') {\n      // Remove any existing spacing and punctuation\n      requirementLabel = requirementLabel.trim().replace(/\\.$/, '');\n      // Add punctuation after the requirementLabel so it doesn't run into the hint\n      requirementLabel = requirementLabel + '.';\n    }\n\n    // Add space between hint and preceding requirementLabel\n    hintPadding = ' ';\n  }\n  return /*#__PURE__*/_jsxs(\"p\", {\n    ...otherProps,\n    id: id,\n    className: hintClasses,\n    children: [requirementLabel, hintPadding, children]\n  });\n};","import { Hint } from \"./Hint\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * Hook that takes the props for a form field component, extracts the props relevant\n * to the Hint, and conditionally renders the hint if it is needed.\n */\nexport function useHint(props) {\n  const {\n    hint,\n    inversed,\n    requirementLabel,\n    hintClassName\n  } = props;\n  let hintElement;\n  let hintId;\n  if (hint || requirementLabel) {\n    hintId = props.hintId ?? `${props.id}__hint`;\n    hintElement = /*#__PURE__*/_jsx(Hint, {\n      requirementLabel: requirementLabel,\n      inversed: inversed,\n      id: hintId,\n      className: hintClassName,\n      children: hint\n    });\n  }\n  return {\n    hintId,\n    hintElement\n  };\n}","import { t } from \"../i18n\";\nimport { SvgIcon } from \"./SvgIcon\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst defaultProps = {\n  className: '',\n  viewBox: '37 2 135 135'\n};\nexport function AlertCircleIcon(props) {\n  const iconCssClasses = `ds-c-icon--alert-circle ${props.className || ''}`;\n  return /*#__PURE__*/_jsx(SvgIcon, {\n    title: t('icons.alertCircle'),\n    ...defaultProps,\n    ...props,\n    className: iconCssClasses,\n    children: /*#__PURE__*/_jsx(\"path\", {\n      d: \"M162.18 41.592c-5.595-9.586-13.185-17.176-22.771-22.771-9.588-5.595-20.055-8.392-31.408-8.392-11.352 0-21.821 2.797-31.408 8.392-9.587 5.594-17.177 13.184-22.772 22.771-5.596 9.587-8.393 20.057-8.393 31.408 0 11.351 2.798 21.82 8.392 31.408 5.595 9.584 13.185 17.176 22.772 22.771 9.587 5.595 20.056 8.392 31.408 8.392s21.822-2.797 31.408-8.392c9.586-5.594 17.176-13.185 22.771-22.771C167.773 94.82 170.57 84.35 170.57 73c0-11.351-2.797-21.822-8.39-31.408zm-43.75 70.433c0 .761-.246 1.398-.734 1.914s-1.086.773-1.793.773H100.26c-.706 0-1.331-.271-1.874-.814-.543-.543-.814-1.168-.814-1.873V96.546c0-.706.271-1.331.814-1.874.543-.543 1.168-.814 1.874-.814h15.643c.707 0 1.306.258 1.793.773.488.518.734 1.154.734 1.915v15.479zm-.164-28.026c-.055.543-.339 1.019-.854 1.426-.517.407-1.154.61-1.914.61h-15.073c-.761 0-1.413-.203-1.956-.61-.543-.407-.815-.883-.815-1.426l-1.385-50.595c0-.653.271-1.141.814-1.467.544-.434 1.196-.652 1.956-.652h17.926c.761 0 1.412.217 1.955.652.543.326.813.815.813 1.467l-1.467 50.595z\"\n    })\n  });\n}","import classNames from 'classnames';\nimport useId from \"../utilities/useId\";\n\n// a type for react icon components that makes the 'title' prop optional & removes 'children' from type\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const SvgIcon = _ref => {\n  let {\n    ariaHidden,\n    className,\n    children,\n    description,\n    id,\n    inversed,\n    title,\n    viewBox,\n    ...otherProps\n  } = _ref;\n  const svgClasses = classNames('ds-c-icon', {\n    'ds-c-icon--inverse': inversed\n  }, className);\n  const rootId = useId('icon--', id);\n  const titleId = `${rootId}__title`;\n  const descriptionId = `${rootId}__desc`;\n  const ariaLabelledBy = description ? `${titleId} ${descriptionId}` : titleId;\n  const isSrVisible = !ariaHidden;\n  const screenReaderProps = {};\n  if (isSrVisible) {\n    screenReaderProps['aria-labelledby'] = ariaLabelledBy;\n    screenReaderProps['role'] = 'img';\n  }\n  return /*#__PURE__*/_jsxs(\"svg\", {\n    \"aria-hidden\": ariaHidden,\n    className: svgClasses,\n    id: id ?? isSrVisible ? rootId : undefined,\n    viewBox: viewBox,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ...screenReaderProps,\n    ...otherProps,\n    children: [isSrVisible && /*#__PURE__*/_jsx(\"title\", {\n      id: titleId,\n      children: title\n    }), isSrVisible && description && /*#__PURE__*/_jsx(\"desc\", {\n      id: descriptionId,\n      children: description\n    }), children]\n  });\n};\nSvgIcon.defaultProps = {\n  ariaHidden: true,\n  inversed: false\n};","import classNames from 'classnames';\nimport { AlertCircleIcon } from \"../Icons/AlertCircleIcon\";\nimport { t } from \"../i18n\";\nimport useId from \"../utilities/useId\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Inline errors are error messages that are paired directly with form fields.\n * They are built in to all form fields in the design system, but they can also\n * be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/inline-error/).\n */\nexport function InlineError(_ref) {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    ...otherProps\n  } = _ref;\n  const classes = classNames('ds-c-inline-error', {\n    'ds-c-inline-error--inverse': inversed\n  }, className);\n  const viewbox = '36 -12 186 186';\n  return /*#__PURE__*/_jsx(\"p\", {\n    ...otherProps,\n    className: classes,\n    id: useId('inline-error--', id),\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    children: children && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(AlertCircleIcon, {\n        viewBox: viewbox\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"ds-u-visibility--screen-reader\",\n        children: `${t('inlineError.prefix')}: `\n      }), children]\n    })\n  });\n}\nexport default InlineError;","import InlineError from \"./InlineError\";\nimport classNames from 'classnames';\nimport { config } from \"../config\";\n\n// TODO: We should conditionally return an errorId, because we want to be able\n// to include it in the aria-describedby without conditional logic in the component\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * Hook that takes the props for a form field component, extracts the props relevant\n * to the error message, and conditionally renders an `InlineError` in the `topError`\n * or `bottomError` property based on the `errorPlacement` and the presence of an\n * `errorMessage`.\n */\nexport function useInlineError(props) {\n  const errorId = props.errorId ?? `${props.id}__error`;\n  const {\n    errorMessage,\n    errorMessageClassName,\n    errorPlacement = config().errorPlacementDefault,\n    inversed\n  } = props;\n  const errorElement = /*#__PURE__*/_jsx(InlineError, {\n    id: errorId,\n    inversed: inversed,\n    className: classNames(errorMessageClassName, errorPlacement === 'bottom' && errorMessage && 'ds-c-inline-error--bottom'),\n    children: errorMessage\n  });\n  let topError;\n  let bottomError;\n  if (errorPlacement === 'top') {\n    topError = errorElement;\n  } else {\n    bottomError = errorElement;\n  }\n\n  // If the user has provided an `aria-invalid` attribute, use that as the source\n  // of truth; otherwise, it's invalid if there's an error message.\n  const invalid = props['aria-invalid'] ?? !!errorMessage;\n  return {\n    errorId: errorMessage ? errorId : undefined,\n    invalid,\n    topError,\n    bottomError\n  };\n}","import classNames from 'classnames';\nimport { Hint } from \"../Hint\";\nimport { InlineError } from \"../InlineError\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { Fragment as _Fragment } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * The Label component describes individual form fields (as a `<label>`) or fieldsets (as\n * a `<legend>`). They are built in to all form fields in the design system, but they can\n * also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/label/).\n */\nexport const Label = props => {\n  const {\n    fieldId,\n    id,\n    children,\n    component,\n    hint,\n    hintId,\n    className,\n    inversed,\n    errorMessage,\n    errorId,\n    requirementLabel,\n    ...labelProps\n  } = props;\n  if (process.env.NODE_ENV !== 'production' && (hint || hintId)) {\n    console.warn(\"[Deprecated]: Hints are now their own component called 'Hint'. Please render your 'Hint' directly instead of passing them to 'Label'.\");\n  }\n  if (process.env.NODE_ENV !== 'production' && errorMessage) {\n    console.warn(\"[Deprecated]: Passing 'errorMessage' to the 'Label' component is now deprecated. Please render your error message directly with the 'InlineError' component instead.\");\n  }\n  let hintElement;\n  if (hint || requirementLabel) {\n    hintElement = /*#__PURE__*/_jsx(Hint, {\n      requirementLabel: requirementLabel,\n      inversed: inversed,\n      id: hintId,\n      children: hint\n    });\n  }\n  let errorElement = errorMessage;\n  if (typeof errorMessage === 'string') {\n    errorElement = /*#__PURE__*/_jsx(InlineError, {\n      id: errorId,\n      children: errorMessage\n    });\n  }\n  let htmlFor = fieldId;\n  if (component === 'legend' && fieldId) {\n    console.warn('The `for` attribute is invalid for legends. Omitting `fieldId` from rendered element.');\n    htmlFor = undefined;\n  }\n  const ComponentType = component;\n  const classes = classNames('ds-c-label', className, inversed && 'ds-c-label--inverse');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ComponentType, {\n      className: classes,\n      htmlFor: htmlFor,\n      id: id,\n      ...labelProps,\n      children: children\n    }), hintElement, errorElement]\n  });\n};\nLabel.defaultProps = {\n  component: 'label'\n};\nexport default Label;","/**\n *\n * Note that this does not return the `fieldId` in the props. That is up to the component\n * to apply to the `Label` itself. Some components purposely do not set a `for` attribute\n * on their labels. These are typically components with multiple inputs wrapped in a\n * `fieldset` like `ChoiceList`, `MultiInputDateField`, and `MonthPicker`.\n */\nexport function useLabelProps(props) {\n  const labelId = props.labelId ?? `${props.id}__label`;\n  const {\n    label,\n    labelClassName,\n    inversed\n  } = props;\n  return {\n    children: label,\n    className: labelClassName,\n    id: labelId,\n    inversed\n  };\n}\nexport default useLabelProps;","/**\n * Cleans all the props associated with labels, hints, error messages, and component\n * wrappers, so they aren't passed to a field element (like an input), where they will\n * likely not be valid props or HTML attributes.\n */\nexport function cleanFieldProps(props) {\n  const newProps = {\n    ...props\n  };\n  delete newProps.className;\n  delete newProps.errorId;\n  delete newProps.errorMessage;\n  delete newProps.errorMessageClassName;\n  delete newProps.errorPlacement;\n  delete newProps.hint;\n  delete newProps.hintId;\n  delete newProps.requirementLabel;\n  delete newProps.labelId;\n  delete newProps.label;\n  delete newProps.labelClassName;\n  return newProps;\n}\nexport default cleanFieldProps;","import mergeIds from \"./mergeIds\";\n/**\n * Creates an `aria-describedby` string in a consistent order from optional\n * `aria-describedby`, `errorId`, and `hintId` props.\n */\nexport function describeField(props) {\n  return mergeIds(props['aria-describedby'], props.errorId, props.hintId) || undefined;\n}\nexport default describeField;","import { isValidElement } from \"preact/compat\";\nexport function findElementsOfType(types, node) {\n  if (!node || !(isValidElement(node) || Array.isArray(node))) {\n    // There's nothing to recurse on, and this is not the droid we're looking for\n    return [];\n  }\n  if (isValidElement(node) && types.includes(node.type)) {\n    // We found it! Return an array because it will be flattened\n    return [node];\n  }\n  if (Array.isArray(node)) {\n    // Recurse on each member of the array and flatten the result\n    return node.reduce((acc, child) => [...acc, ...findElementsOfType(types, child)], []);\n  }\n\n  // It's a React element, so recurse on its children (a ReactNode)\n  return findElementsOfType(types, node.props?.children);\n}","import classNames from 'classnames';\n/**\n * Strings together ids that may or may not exist with spaces in between. The\n * functionality is the same as `classNames`, but using a function named\n * `classNames` for merging ids makes the code a little confusing to read.\n *\n * Example use case: the `aria-describedby` attribute\n */\nconst mergeIds = classNames;\nexport default mergeIds;","import Choice from \"./Choice\";\nimport { Label } from \"../Label\";\nimport classNames from 'classnames';\nimport describeField from \"../utilities/describeField\";\nimport useId from \"../utilities/useId\";\nimport { useLabelProps } from \"../Label/useLabelProps\";\nimport { useHint } from \"../Hint/useHint\";\nimport { useInlineError } from \"../InlineError/useInlineError\";\n\n// Omit props that we override with values from the ChoiceList\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component, refer to the\n * [checkbox](https://design.cms.gov/components/checkbox/) and\n * [radio](https://design.cms.gov/components/radio/) documentation pages.\n *\n * Checkboxes and radios can be managed as a group using `<ChoiceList>` or\n * individually using `<Choice>`. Note that each of the items in the `choices`\n * array represents props that will be passed to an individual `<Choice>`\n * component. You can therefore define any of the props listed in the `<Choice>`\n * props table below, including all valid attributes of the\n * [HTML input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).\n */\nexport const ChoiceList = props => {\n  const {\n    onBlur,\n    onComponentBlur,\n    choices\n  } = props;\n  const id = useId('choice-list--', props.id);\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.type !== 'checkbox' && props.choices.length === 1) {\n      console.warn(`[Warning]: Use type=\"checkbox\" for components with only one choice. A single radio button is disallowed because it prevents users from deselecting the field.`);\n    }\n  }\n  const choiceRefs = [];\n  const handleBlur = evt => {\n    if (onBlur) onBlur(evt);\n    if (onComponentBlur) handleComponentBlur(evt);\n  };\n  const handleComponentBlur = evt => {\n    // The active element is always the document body during a focus\n    // transition, so in order to check if the newly focused element\n    // is one of our choices, we're going to have to wait a bit.\n    setTimeout(() => {\n      if (!choiceRefs.includes(document.activeElement)) {\n        onComponentBlur(evt);\n      }\n    }, 20);\n  };\n  const {\n    errorId,\n    topError,\n    bottomError,\n    invalid\n  } = useInlineError({\n    ...props,\n    id\n  });\n  const {\n    hintId,\n    hintElement\n  } = useHint({\n    ...props,\n    id\n  });\n  const labelProps = useLabelProps({\n    ...props,\n    id\n  });\n  const choiceItems = choices.map((choiceProps, index) => {\n    const completeChoiceProps = {\n      // Allow this to be overridden by the choiceProps\n      id: `${id}__choice--${index}`,\n      ...choiceProps,\n      inversed: props.inversed,\n      name: props.name,\n      // onBlur: (onBlur || onComponentBlur) && handleBlur,\n      onBlur: handleBlur,\n      onChange: props.onChange,\n      size: props.size,\n      type: props.type,\n      inputClassName: classNames(choiceProps.inputClassName, {\n        'ds-c-choice--error': props.errorMessage\n      }),\n      disabled: choiceProps.disabled || props.disabled,\n      // Individual choices can be disabled as well as the entire field\n      inputRef: ref => {\n        choiceRefs.push(ref);\n        if (choiceProps.inputRef) {\n          choiceProps.inputRef(ref);\n        }\n      },\n      _choiceChild: true\n    };\n    if (process.env.NODE_ENV !== 'production') {\n      if ('errorMessage' in completeChoiceProps) {\n        console.warn(`[Warning]: Error messages on individual child Choice components is not a valid pattern. Errors should only be displayed on the parent ChoiceList component.`);\n      }\n    }\n    return /*#__PURE__*/_jsx(Choice, {\n      ...completeChoiceProps\n    }, choiceProps.value);\n  });\n  return /*#__PURE__*/_jsxs(\"fieldset\", {\n    \"aria-invalid\": invalid,\n    \"aria-describedby\": describeField({\n      ...props,\n      hintId,\n      errorId\n    }),\n    className: classNames('ds-c-fieldset', props.className),\n    role: props.type === 'radio' ? 'radiogroup' : null,\n    children: [/*#__PURE__*/_jsx(Label, {\n      component: \"legend\",\n      ...labelProps\n    }), hintElement, topError, choiceItems, bottomError]\n  });\n};\nexport default ChoiceList;","import { define } from \"../preactement/define\";\nimport { ChoiceList } from \"../../ChoiceList/ChoiceList\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { findElementsOfType } from \"../../utilities/findElementsOfType\";\nimport { formAttrs } from \"../shared-attributes/form\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['choices', 'class-name', 'disabled', 'inversed', 'name', 'root-id', 'size', 'type', ...formAttrs];\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-enable */\n\nconst Wrapper = _ref => {\n  let {\n    children,\n    choices,\n    rootId,\n    ...otherProps\n  } = _ref;\n  function parseChildren(node) {\n    const elements = findElementsOfType(['ds-choice'], node);\n    if (elements.length) {\n      return Array.from(elements).map(element => {\n        const {\n          children,\n          ...attrs\n        } = element.props;\n\n        /**\n         * Begin logic to define optional nested children of a choice.\n         */\n        let checkedChild,\n          uncheckedChild = undefined;\n        if (element.props.children.length > 0) {\n          element.props.children.map(child => {\n            if (typeof child !== 'string') {\n              const {\n                children,\n                slot\n              } = child.props;\n              if (slot === 'checked-children') {\n                checkedChild = children;\n              }\n              if (slot === 'unchecked-children') {\n                uncheckedChild = children;\n              }\n            }\n          });\n        }\n        return {\n          checkedChildren: checkedChild,\n          uncheckedChildren: uncheckedChild,\n          ...attrs\n        };\n      });\n    }\n    return [];\n  }\n  return /*#__PURE__*/_jsx(ChoiceList, {\n    ...otherProps,\n    choices: typeof choices === 'string' ? JSON.parse(choices) : parseChildren(children),\n    disabled: parseBooleanAttr(otherProps.disabled),\n    id: rootId,\n    inversed: parseBooleanAttr(otherProps.inversed)\n  });\n};\ndefine('ds-choice-list', () => Wrapper, {\n  attributes,\n  events: ['onChange', 'onBlur', 'onComponentBlur']\n});","import { define } from \"../preactement/define\";\nimport { Choice } from \"../../ChoiceList/Choice\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { formAttrs } from \"../shared-attributes/form\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['checked-children', 'class-name', 'checked', 'default-checked', 'disabled', 'input-class-name', 'inversed', 'name', 'root-id', 'size', 'type', 'unchecked-children', 'value', ...formAttrs];\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-enable */\n\nconst Wrapper = _ref => {\n  let {\n    checked,\n    defaultChecked,\n    rootId,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(Choice, {\n    ...otherProps,\n    checked: checked && Boolean(JSON.parse(checked)),\n    defaultChecked: defaultChecked && Boolean(JSON.parse(defaultChecked)),\n    disabled: parseBooleanAttr(otherProps.disabled),\n    id: rootId,\n    inversed: parseBooleanAttr(otherProps.inversed)\n  });\n};\ndefine('ds-choice', () => Wrapper, {\n  attributes,\n  events: ['onChange', 'onBlur']\n});","const labelAttrs = ['label', 'label-class-name', 'label-id'];\nconst hintAttrs = ['hint', 'hint-id', 'requirement-label', 'hint-class-name'];\nconst inlineErrorAttrs = ['error-id', 'error-placement', 'error-message', 'error-message-class-name'];\nexport const formAttrs = [...labelAttrs, ...hintAttrs, ...inlineErrorAttrs];","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["window","EvEmitter","proto","prototype","on","eventName","listener","events","this","_events","listeners","indexOf","push","once","onceEvents","_onceEvents","off","length","index","splice","emitEvent","args","slice","onceListeners","i","apply","allOff","dsChoiceEmitter","Choice","_ref","_choiceChild","props","initialCheckedState","checked","defaultChecked","internalCheckedState","setChecked","useState","isControlled","undefined","radioCheckedEventName","name","id","hintId","hintElement","labelProps","errorId","errorElement","inversed","className","errorMessageClassName","children","errorMessage","useEffect","type","handleRadioChecked","checkedId","ariaLive","ariaRelevant","ariaAtomic","inputClassName","inputRef","size","checkedChildren","uncheckedChildren","inputProps","onChange","event","target","ref","fieldId","defaultProps","Hint","requirementLabel","otherProps","hintClasses","hintPadding","trim","replace","useHint","hint","hintClassName","viewBox","AlertCircleIcon","iconCssClasses","title","t","d","SvgIcon","ariaHidden","description","svgClasses","rootId","titleId","descriptionId","ariaLabelledBy","isSrVisible","screenReaderProps","xmlns","InlineError","classes","useInlineError","errorPlacement","errorPlacementDefault","topError","bottomError","invalid","Label","component","htmlFor","console","warn","ComponentType","useLabelProps","labelId","label","labelClassName","newProps","findElementsOfType","types","node","isValidElement","Array","isArray","includes","reduce","acc","child","ChoiceList","onBlur","onComponentBlur","choices","useId","choiceRefs","handleBlur","evt","handleComponentBlur","setTimeout","document","activeElement","choiceItems","map","choiceProps","completeChoiceProps","disabled","value","describeField","role","attributes","Wrapper","JSON","parse","elements","from","element","attrs","checkedChild","uncheckedChild","slot","parseChildren","Boolean","formAttrs","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseInt","parseJsonAttr","str","e","isJsonString"],"sourceRoot":""}