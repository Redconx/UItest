{"version":3,"file":"ds-step-list.js","mappings":"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","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/SvgIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/StepList/StepLink.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/StepList/SubStep.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Icons/CheckIcon.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/StepList/Step.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/StepList/StepList.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-step-list/ds-step-list.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import classNames from 'classnames';\nimport useId from \"../utilities/useId\";\n\n// a type for react icon components that makes the 'title' prop optional & removes 'children' from type\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const SvgIcon = _ref => {\n  let {\n    ariaHidden,\n    className,\n    children,\n    description,\n    id,\n    inversed,\n    title,\n    viewBox,\n    ...otherProps\n  } = _ref;\n  const svgClasses = classNames('ds-c-icon', {\n    'ds-c-icon--inverse': inversed\n  }, className);\n  const rootId = useId('icon--', id);\n  const titleId = `${rootId}__title`;\n  const descriptionId = `${rootId}__desc`;\n  const ariaLabelledBy = description ? `${titleId} ${descriptionId}` : titleId;\n  const isSrVisible = !ariaHidden;\n  const screenReaderProps = {};\n  if (isSrVisible) {\n    screenReaderProps['aria-labelledby'] = ariaLabelledBy;\n    screenReaderProps['role'] = 'img';\n  }\n  return /*#__PURE__*/_jsxs(\"svg\", {\n    \"aria-hidden\": ariaHidden,\n    className: svgClasses,\n    id: id ?? isSrVisible ? rootId : undefined,\n    viewBox: viewBox,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ...screenReaderProps,\n    ...otherProps,\n    children: [isSrVisible && /*#__PURE__*/_jsx(\"title\", {\n      id: titleId,\n      children: title\n    }), isSrVisible && description && /*#__PURE__*/_jsx(\"desc\", {\n      id: descriptionId,\n      children: description\n    }), children]\n  });\n};\nSvgIcon.defaultProps = {\n  ariaHidden: true,\n  inversed: false\n};","import { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const StepLink = props => {\n  function handleClick(event) {\n    if (props.onClick) {\n      event.preventDefault();\n      props.onClick(props.href, props.stepId);\n    }\n  }\n  const ComponentType = props.component ?? 'a';\n  return /*#__PURE__*/_jsxs(ComponentType, {\n    href: props.href,\n    onClick: handleClick,\n    className: props.className,\n    children: [props.children, props.screenReaderText && /*#__PURE__*/_jsxs(\"span\", {\n      className: \"ds-u-visibility--screen-reader\",\n      children: [\" \", props.screenReaderText]\n    })]\n  });\n};\nexport default StepLink;","import StepLink from \"./StepLink\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const SubStep = _ref => {\n  let {\n    step,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsxs(\"li\", {\n    role: \"listitem\",\n    className: \"ds-c-substep\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"ds-c-substep__heading\",\n      children: step.heading\n    }), (step.completed || step.started) && /*#__PURE__*/_jsx(StepLink, {\n      component: step.component,\n      href: step.href,\n      stepId: step.id,\n      screenReaderText: step.heading,\n      onClick: step.onClick || props.onStepLinkClick,\n      className: \"ds-c-substep__edit\",\n      children: step.linkText || props.editText\n    }), step.steps && props.showSubSubSteps && /*#__PURE__*/_jsx(\"ul\", {\n      role: \"list\",\n      children: step.steps.map((s, i) => /*#__PURE__*/_jsx(SubStep, {\n        step: s,\n        ...props\n      }, s.id || i))\n    })]\n  });\n};\nexport default SubStep;","import { t } from \"../i18n\";\nimport { SvgIcon } from \"./SvgIcon\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst defaultProps = {\n  className: '',\n  viewBox: '0 0 16 12'\n};\nexport function CheckIcon(props) {\n  const iconCssClasses = `ds-c-icon--check ${props.className || ''}`;\n  return /*#__PURE__*/_jsx(SvgIcon, {\n    title: t('icons.check'),\n    ...defaultProps,\n    ...props,\n    className: iconCssClasses,\n    children: /*#__PURE__*/_jsx(\"path\", {\n      d: \"M16 2.343a.969.969 0 00-.289-.686L14.307.283a1.012 1.012 0 00-1.404 0L6.132 6.919 3.097 3.94a1.012 1.012 0 00-1.404 0L.289 5.313A.969.969 0 000 6c0 .253.103.505.289.687l5.14 5.03a1.012 1.012 0 001.405 0L15.71 3.03A.969.969 0 0016 2.343z\"\n    })\n  });\n}","import StepLink from \"./StepLink\";\nimport SubStep from \"./SubStep\";\nimport classNames from 'classnames';\nimport { CheckIcon } from \"../Icons\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\nexport const Step = _ref => {\n  let {\n    step,\n    ...props\n  } = _ref;\n  const Heading = `h${step.headingLevel || '2'}`;\n  const start = step.isNextStep;\n  const resume = step.started && !step.completed;\n  const className = classNames('ds-c-step', {\n    'ds-c-step--current': start || resume,\n    'ds-c-step--completed': step.completed\n  });\n  const contentClassName = classNames('ds-c-step__content', {\n    'ds-c-step__content--with-content': step.description || step.steps\n  });\n  let linkLabel;\n  if (step.completed && !step.steps) {\n    linkLabel = step.linkText || props.editText;\n  } else if (start) {\n    linkLabel = step.linkText || props.startText;\n  } else if (resume) {\n    linkLabel = step.linkText || props.resumeText;\n  }\n  let linkClassName;\n  if (start || resume) {\n    linkClassName = 'ds-c-button ds-c-button--solid ds-c-button--main ds-c-button--on-light';\n  }\n\n  // TODO: make heading required after removing title\n  return /*#__PURE__*/_jsxs(\"li\", {\n    role: \"listitem\",\n    className: className,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: contentClassName,\n      children: [/*#__PURE__*/_jsx(Heading, {\n        className: \"ds-c-step__heading\",\n        children: step.heading\n      }), step.description && /*#__PURE__*/_jsx(\"div\", {\n        className: \"ds-c-step__description\",\n        role: \"region\",\n        children: step.description\n      }), step.steps && /*#__PURE__*/_jsx(\"ol\", {\n        role: \"list\",\n        className: \"ds-c-step__substeps\",\n        children: step.steps.map((s, i) => /*#__PURE__*/_jsx(SubStep, {\n          step: {\n            ...s,\n            ...{\n              component: step.component || s.component\n            }\n          },\n          ...props\n        }, s.id || i))\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"ds-c-step__actions\",\n      role: \"region\",\n      children: [step.completed && /*#__PURE__*/_jsxs(\"div\", {\n        className: \"ds-c-step__completed-text\",\n        children: [/*#__PURE__*/_jsx(CheckIcon, {\n          className: \"ds-c-icon-color--success\"\n        }), props.completedText]\n      }), linkLabel && /*#__PURE__*/_jsx(StepLink, {\n        component: step.component,\n        href: step.href,\n        stepId: step.id,\n        screenReaderText: step.heading,\n        onClick: step.onClick || props.onStepLinkClick,\n        className: linkClassName,\n        children: linkLabel\n      })]\n    })]\n  });\n};\nexport default Step;","import Step from \"./Step\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/step-list/).\n *\n * ## Start, Resume, and Edit links\n *\n * A user interacts with the steps through \"Start\", \"Resume\", and \"Edit\"\n * links.\n *\n * In the React component, the links' `href` properties are determined by the\n * `step` object's `href` property. One can also optionally pass an\n * `onStepLinkClick` function that will cancel the default link behavior and call\n * `onStepLinkClick` with `href` as a parameter for apps that handle routing with\n * JavaScript.\n *\n * When a step has substeps and is incomplete, the `href` property should be set to\n * match the `href` of the current substep—that is, the first incomplete substep.\n * The \"Edit\" button will only appear on substeps that have been completed.\n *\n * ## Managing list state\n *\n * ### Substeps\n *\n * The `<StepList>` component takes an array of step objects. From there steps can\n * be broken down infinitely into sub-steps. This allows us to have unique URLs for\n * each part of a step; however, by default we only display two levels of this tree\n * —the _step_ and _substep_. This default behavior should remain unchanged except\n * for special circumstances. It is better not to overwhelm the user with showing\n * all the substeps and giving them names.\n *\n * We do, nonetheless, encourage the use of sub-substeps that are not visible where\n * these substeps span multiple pages and have their own unique URLs. If, for\n * example, the user completes the first page of the `household > overall` substep\n * where they list the household members but has not completed the second page\n * where they define those members' relationships to each other, we want the\n * \"Resume\" button to take them back to the relationships page and not the first\n * page where they entered their names. This, of course, requires an extra\n * steps-building process to update a top-level steps' `href` property by\n * traversing the substep tree to find the first incomplete step. See the\n * [Completed, started, and isNextStep](#completed-started-and-isnextstep) section\n * below for an example JavaScript function that can change the `href` of steps\n * based on their substeps.\n *\n * ### Completed, started, and isNextStep\n *\n * The _state_ of a step object will be defined for these purposes as the values\n * of its `completed`, `started`, and `isNextStep` properties. These correspond to\n * different visual states when rendered by the `<StepList>`, showing \"Completed\",\n * \"Resume\", or \"Start\" respectively. For steps with substeps, the state should be\n * representative of the collective states of its substeps. For example, if a step\n * has substeps that have `completed: false`, that step should not have\n * `completed: true` because not all of its substeps have been completed. Similarly\n * a step can only be `started` if at least one of its substeps has been `started`.\n * This should be true for each of the substep's substeps and so on. Below is an\n * example function that can propagate this state information up from the smallest\n * substep to the largest step before passing the steps array to the `<StepList>`\n * component.\n *\n * ```js\n * function propagateSubstepState(step) {\n *   if (step.steps) {\n *     const steps = step.steps.map(propagateSubstepState);\n *     const newStep = {\n *       ...step,\n *       steps,\n *       started: steps.some((s) => s.started),\n *       completed: steps.every((s) => s.completed),\n *     };\n *     if (!newStep.completed) {\n *       const nextStep = steps.find((s) => !s.completed);\n *       newStep.href = nextStep.href;\n *     }\n *     return newStep;\n *   } else {\n *     return step;\n *   }\n * }\n *\n * // ...\n * //\n * // Render function:\n *\n * const steps = rawSteps.map(propagateSubstepState);\n * return <StepList steps={steps} />;\n * ```\n */\nexport const StepList = _ref => {\n  let {\n    steps,\n    component,\n    showSubSubSteps = false,\n    completedText = 'Completed',\n    editText = 'Edit',\n    resumeText = 'Resume',\n    startText = 'Start',\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(\"ol\", {\n    role: \"list\",\n    className: \"ds-c-step-list\",\n    children: steps.map((step, i) => /*#__PURE__*/_jsx(Step, {\n      step: {\n        ...step,\n        ...{\n          component: component || step.component\n        }\n      },\n      showSubSubSteps,\n      completedText,\n      editText,\n      resumeText,\n      startText,\n      ...otherProps\n    }, step.id || i))\n  });\n};\nexport default StepList;","import { define } from \"../preactement/define\";\nimport { StepList } from \"../../StepList\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['steps', 'show-sub-sub-steps', 'completed-text', 'edit-text', 'resume-text', 'start-text', 'actions-label-text', 'substeps-label-text'];\nconst Wrapper = _ref => {\n  let {\n    steps = '[]',\n    showSubSubSteps,\n    completedText,\n    editText,\n    resumeText,\n    startText,\n    actionsLabelText,\n    substepsLabelText,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(StepList, {\n    steps: JSON.parse(steps),\n    showSubSubSteps: parseBooleanAttr(showSubSubSteps),\n    completedText: completedText,\n    editText: editText,\n    resumeText: resumeText,\n    startText: startText,\n    actionsLabelText: actionsLabelText,\n    substepsLabelText: substepsLabelText,\n    ...otherProps\n  });\n};\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-enable */\n\ndefine('ds-step-list', () => Wrapper, {\n  attributes\n});","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["SvgIcon","_ref","ariaHidden","className","children","description","id","inversed","title","viewBox","otherProps","svgClasses","rootId","titleId","descriptionId","ariaLabelledBy","isSrVisible","screenReaderProps","undefined","xmlns","defaultProps","props","ComponentType","component","href","onClick","event","preventDefault","stepId","screenReaderText","SubStep","step","role","heading","completed","started","onStepLinkClick","linkText","editText","steps","showSubSubSteps","map","s","i","CheckIcon","iconCssClasses","t","d","Heading","headingLevel","start","isNextStep","resume","contentClassName","linkLabel","linkClassName","startText","resumeText","completedText","StepList","Wrapper","actionsLabelText","substepsLabelText","JSON","parse","attributes","parseBooleanAttr","attr","parseDateAttr","Date","parseIntegerAttr","parseInt","parseJsonAttr","str","e","isJsonString"],"sourceRoot":""}