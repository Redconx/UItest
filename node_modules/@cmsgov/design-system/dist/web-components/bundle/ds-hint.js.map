{"version":3,"file":"ds-hint.js","mappings":"0LAUO,MAAMA,EAAOC,IAClB,IAAI,SACFC,EAAQ,UACRC,EAAS,GACTC,EAAE,SACFC,EAAQ,iBACRC,KACGC,GACDN,EACJ,MAAMO,EAAc,IAAW,YAAaH,GAAY,qBAAsBF,GAC9E,IAAIM,EAYJ,OAXIH,GAAoBJ,IACU,iBAArBI,IAETA,EAAmBA,EAAiBI,OAAOC,QAAQ,MAAO,IAE1DL,GAAsC,KAIxCG,EAAc,MAEI,QAAM,IAAK,IAC1BF,EACHH,GAAIA,EACJD,UAAWK,EACXN,SAAU,CAACI,EAAkBG,EAAaP,IAC1C,C,oECjCJ,MACMU,EAAUX,IACd,IAAI,SACFI,EAAQ,OACRQ,KACGN,GACDN,EACJ,OAAoB,QAAKD,EAAA,EAAM,IAC1BO,EACHF,UAAU,QAAiBA,GAC3BD,GAAIS,GACJ,GAEJ,OAAO,WAAW,IAAMD,GAAS,CAC/BE,WAdiB,CAAC,aAAc,WAAY,oBAAqB,Y,iBCJ5D,SAASC,EAAiBC,GAE/B,YAAgBC,IAATD,GAA+B,UAATA,CAC/B,CACO,SAASE,EAAcF,GAC5B,OAAOA,EAAO,IAAIG,KAAKH,QAAQC,CACjC,CACO,SAASG,EAAiBJ,GAC/B,QAAaC,IAATD,EAAoB,OAAOK,SAASL,EAC1C,CACO,SAASM,EAAcN,GAS5B,MARqBO,KACnB,IACEC,KAAKC,MAAMF,EACb,CAAE,MAAOG,GACP,OAAO,CACT,CACA,OAAO,CAAI,EAENC,CAAaX,GAAQQ,KAAKC,MAAMT,GAAQA,CACjD,C","sources":["webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/Hint/Hint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/ds-hint/ds-hint.js","webpack://DesignSystem/./packages/design-system/dist/preact-components/esm/web-components/wrapperUtils.js"],"sourcesContent":["import classNames from 'classnames';\nimport { jsxs as _jsxs } from \"preact/compat/jsx-runtime\";\n/**\n * Hints are used in conjunction with a Label to describe individual form fields\n * or fieldsets. They are built in to all form fields in the design system, but\n * they can also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/hint/).\n */\nexport const Hint = _ref => {\n  let {\n    children,\n    className,\n    id,\n    inversed,\n    requirementLabel,\n    ...otherProps\n  } = _ref;\n  const hintClasses = classNames('ds-c-hint', inversed && 'ds-c-hint--inverse', className);\n  let hintPadding;\n  if (requirementLabel && children) {\n    if (typeof requirementLabel === 'string') {\n      // Remove any existing spacing and punctuation\n      requirementLabel = requirementLabel.trim().replace(/\\.$/, '');\n      // Add punctuation after the requirementLabel so it doesn't run into the hint\n      requirementLabel = requirementLabel + '.';\n    }\n\n    // Add space between hint and preceding requirementLabel\n    hintPadding = ' ';\n  }\n  return /*#__PURE__*/_jsxs(\"p\", {\n    ...otherProps,\n    id: id,\n    className: hintClasses,\n    children: [requirementLabel, hintPadding, children]\n  });\n};","import { define } from \"../preactement/define\";\nimport { Hint } from \"../../Hint\";\nimport { parseBooleanAttr } from \"../wrapperUtils\";\nimport { jsx as _jsx } from \"preact/compat/jsx-runtime\";\nconst attributes = ['class-name', 'inversed', 'requirement-label', 'root-id'];\nconst Wrapper = _ref => {\n  let {\n    inversed,\n    rootId,\n    ...otherProps\n  } = _ref;\n  return /*#__PURE__*/_jsx(Hint, {\n    ...otherProps,\n    inversed: parseBooleanAttr(inversed),\n    id: rootId\n  });\n};\ndefine('ds-hint', () => Wrapper, {\n  attributes\n});","export function parseBooleanAttr(attr) {\n  // If it's defined but has no value, we count that as `true`.\n  return attr !== undefined && attr !== 'false';\n}\nexport function parseDateAttr(attr) {\n  return attr ? new Date(attr) : undefined;\n}\nexport function parseIntegerAttr(attr) {\n  if (attr !== undefined) return parseInt(attr);\n}\nexport function parseJsonAttr(attr) {\n  const isJsonString = str => {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n  return isJsonString(attr) ? JSON.parse(attr) : attr;\n}"],"names":["Hint","_ref","children","className","id","inversed","requirementLabel","otherProps","hintClasses","hintPadding","trim","replace","Wrapper","rootId","attributes","parseBooleanAttr","attr","undefined","parseDateAttr","Date","parseIntegerAttr","parseInt","parseJsonAttr","str","JSON","parse","e","isJsonString"],"sourceRoot":""}